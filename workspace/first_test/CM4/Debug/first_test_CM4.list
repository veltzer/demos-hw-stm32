
first_test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800406c  0800406c  000060a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800406c  0800406c  0000506c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004074  08004074  000060a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004074  08004074  00005074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800407c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200000a0  0800411c  000060a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800411c  000062d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d59a  00000000  00000000  000060ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  00013664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  00015688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  000164c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2dd  00000000  00000000  00016f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d575  00000000  00000000  00034255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2b78  00000000  00000000  000417ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4342  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  000f4388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000f8530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a0 	.word	0x200000a0
 800015c:	00000000 	.word	0x00000000
 8000160:	08003f10 	.word	0x08003f10

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a4 	.word	0x200000a4
 800017c:	08003f10 	.word	0x08003f10

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000574:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4013      	ands	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 fbcc 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f860 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8b2 	bl	80006fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa0f 	bl	80009bc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fa0c 	bl	80009bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 fa09 	bl	80009bc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005aa:	2101      	movs	r1, #1
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fa73 	bl	8000a98 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fa6f 	bl	8000a98 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80005ba:	2101      	movs	r1, #1
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 fa6b 	bl	8000a98 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005c2:	4b21      	ldr	r3, [pc, #132]	@ (8000648 <main+0xc0>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <main+0xc0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <main+0xc0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000648 <main+0xc0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <main+0xc0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005e2:	4919      	ldr	r1, [pc, #100]	@ (8000648 <main+0xc0>)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fadd 	bl	8000ba4 <BSP_COM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <main+0x6c>
  {
    Error_Handler();
 80005f0:	f000 f8b2 	bl	8000758 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80005f4:	4815      	ldr	r0, [pc, #84]	@ (800064c <main+0xc4>)
 80005f6:	f002 fe25 	bl	8003244 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_BLUE);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fa18 	bl	8000a30 <BSP_LED_On>
  BSP_LED_On(LED_GREEN);
 8000600:	2001      	movs	r0, #1
 8000602:	f000 fa15 	bl	8000a30 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000606:	2002      	movs	r0, #2
 8000608:	f000 fa12 	bl	8000a30 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 ff15 	bl	800143c <HAL_PWREx_ReleaseCore>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    BSP_LED_Toggle(LED_BLUE);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fa26 	bl	8000a64 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000618:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <main+0xc8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fbf9 	bl	8000e14 <HAL_Delay>

    BSP_LED_Toggle(LED_GREEN);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fa1e 	bl	8000a64 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <main+0xc8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fbf1 	bl	8000e14 <HAL_Delay>

    BSP_LED_Toggle(LED_RED);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fa16 	bl	8000a64 <BSP_LED_Toggle>
    HAL_Delay(delay);
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <main+0xc8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fbe9 	bl	8000e14 <HAL_Delay>
    BSP_LED_Toggle(LED_BLUE);
 8000642:	bf00      	nop
 8000644:	e7e5      	b.n	8000612 <main+0x8a>
 8000646:	bf00      	nop
 8000648:	200000bc 	.word	0x200000bc
 800064c:	08003f28 	.word	0x08003f28
 8000650:	20000004 	.word	0x20000004

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09a      	sub	sp, #104	@ 0x68
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2248      	movs	r2, #72	@ 0x48
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fe43 	bl	80032ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xa4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000682:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <SystemClock_Config+0xa4>)
 8000684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <SystemClock_Config+0xa4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000696:	2320      	movs	r3, #32
 8000698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a2:	2360      	movs	r3, #96	@ 0x60
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f986 	bl	80019c0 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f84d 	bl	8000758 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80006be:	236f      	movs	r3, #111	@ 0x6f
 80006c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fcf0 	bl	80020c4 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f835 	bl	8000758 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3768      	adds	r7, #104	@ 0x68
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	58000400 	.word	0x58000400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000700:	2004      	movs	r0, #4
 8000702:	f7ff ff29 	bl	8000558 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <BSP_PB_Callback>:
* @brief BSP Push Button callback
* @param Button Specifies the pressed button
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  switch(Button)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d00f      	beq.n	800073c <BSP_PB_Callback+0x30>
 800071c:	2b02      	cmp	r3, #2
 800071e:	dc12      	bgt.n	8000746 <BSP_PB_Callback+0x3a>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d002      	beq.n	800072a <BSP_PB_Callback+0x1e>
 8000724:	2b01      	cmp	r3, #1
 8000726:	d004      	beq.n	8000732 <BSP_PB_Callback+0x26>
    case BUTTON_SW3:
      /* Change the period to 1000 ms */
      delay = 1000;
      break;
    default:
      break;
 8000728:	e00d      	b.n	8000746 <BSP_PB_Callback+0x3a>
      delay = 100;
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <BSP_PB_Callback+0x48>)
 800072c:	2264      	movs	r2, #100	@ 0x64
 800072e:	601a      	str	r2, [r3, #0]
      break;
 8000730:	e00a      	b.n	8000748 <BSP_PB_Callback+0x3c>
      delay = 500;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <BSP_PB_Callback+0x48>)
 8000734:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000738:	601a      	str	r2, [r3, #0]
      break;
 800073a:	e005      	b.n	8000748 <BSP_PB_Callback+0x3c>
      delay = 1000;
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <BSP_PB_Callback+0x48>)
 800073e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000742:	601a      	str	r2, [r3, #0]
      break;
 8000744:	e000      	b.n	8000748 <BSP_PB_Callback+0x3c>
      break;
 8000746:	bf00      	nop
  }
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000004 	.word	0x20000004

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c0:	f000 fb0c 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00a      	b.n	80007f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007da:	f3af 8000 	nop.w
 80007de:	4601      	mov	r1, r0
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	b2ca      	uxtb	r2, r1
 80007e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf0      	blt.n	80007da <_read+0x12>
  }

  return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e009      	b.n	8000828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fa23 	bl	8000c68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf1      	blt.n	8000814 <_write+0x12>
  }
  return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_close>:

int _close(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000860:	605a      	str	r2, [r3, #4]
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <_isatty>:

int _isatty(int file)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f002 fd5e 	bl	800338c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20008000 	.word	0x20008000
 80008fc:	00000400 	.word	0x00000400
 8000900:	200000cc 	.word	0x200000cc
 8000904:	200002d0 	.word	0x200002d0

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800090c:	f7ff fe1e 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f002 fd2f 	bl	8003398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fe25 	bl	8000588 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800094c:	0800407c 	.word	0x0800407c
  ldr r2, =_sbss
 8000950:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000954:	200002d0 	.word	0x200002d0

08000958 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>

0800095a <LL_AHB2_GRP1_EnableClock>:
{
 800095a:	b480      	push	{r7}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4313      	orrs	r3, r2
 8000970:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000976:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4013      	ands	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800098a:	b480      	push	{r7}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4313      	orrs	r3, r2
 80009a0:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80009a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4013      	ands	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ae:	68fb      	ldr	r3, [r7, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
	...

080009bc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f7ff ffbf 	bl	800095a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <BSP_LED_Init+0x6c>)
 80009e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <BSP_LED_Init+0x70>)
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	f107 020c 	add.w	r2, r7, #12
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fb63 	bl	80010cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <BSP_LED_Init+0x70>)
 8000a0a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <BSP_LED_Init+0x6c>)
 8000a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f000 fcb7 	bl	800138c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	08004000 	.word	0x08004000
 8000a2c:	20000008 	.word	0x20000008

08000a30 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <BSP_LED_On+0x2c>)
 8000a3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4a06      	ldr	r2, [pc, #24]	@ (8000a60 <BSP_LED_On+0x30>)
 8000a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f000 fc9d 	bl	800138c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	08004000 	.word	0x08004000

08000a64 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <BSP_LED_Toggle+0x2c>)
 8000a72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4906      	ldr	r1, [pc, #24]	@ (8000a94 <BSP_LED_Toggle+0x30>)
 8000a7a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f000 fc9a 	bl	80013ba <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008
 8000a94:	08004000 	.word	0x08004000

08000a98 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <BSP_PB_Init+0x2e>
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff ff4b 	bl	800095a <LL_AHB2_GRP1_EnableClock>
 8000ac4:	e00c      	b.n	8000ae0 <BSP_PB_Init+0x48>
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d103      	bne.n	8000ad4 <BSP_PB_Init+0x3c>
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff ff44 	bl	800095a <LL_AHB2_GRP1_EnableClock>
 8000ad2:	e005      	b.n	8000ae0 <BSP_PB_Init+0x48>
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d102      	bne.n	8000ae0 <BSP_PB_Init+0x48>
 8000ada:	2004      	movs	r0, #4
 8000adc:	f7ff ff3d 	bl	800095a <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a29      	ldr	r2, [pc, #164]	@ (8000b88 <BSP_PB_Init+0xf0>)
 8000ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10c      	bne.n	8000b12 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <BSP_PB_Init+0xf4>)
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	f107 020c 	add.w	r2, r7, #12
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fade 	bl	80010cc <HAL_GPIO_Init>
 8000b10:	e035      	b.n	8000b7e <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b16:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <BSP_PB_Init+0xf4>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	f107 020c 	add.w	r2, r7, #12
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fad0 	bl	80010cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4a17      	ldr	r2, [pc, #92]	@ (8000b90 <BSP_PB_Init+0xf8>)
 8000b32:	441a      	add	r2, r3
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4917      	ldr	r1, [pc, #92]	@ (8000b94 <BSP_PB_Init+0xfc>)
 8000b38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4610      	mov	r0, r2
 8000b40:	f000 fab0 	bl	80010a4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4a11      	ldr	r2, [pc, #68]	@ (8000b90 <BSP_PB_Init+0xf8>)
 8000b4a:	1898      	adds	r0, r3, r2
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <BSP_PB_Init+0x100>)
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	461a      	mov	r2, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	f000 fa8b 	bl	8001072 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <BSP_PB_Init+0x104>)
 8000b60:	56d0      	ldrsb	r0, [r2, r3]
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba0 <BSP_PB_Init+0x108>)
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f000 fa4c 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a09      	ldr	r2, [pc, #36]	@ (8000b9c <BSP_PB_Init+0x104>)
 8000b76:	56d3      	ldrsb	r3, [r2, r3]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fa60 	bl	800103e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08004008 	.word	0x08004008
 8000b8c:	20000014 	.word	0x20000014
 8000b90:	200000d0 	.word	0x200000d0
 8000b94:	08004014 	.word	0x08004014
 8000b98:	20000024 	.word	0x20000024
 8000b9c:	08004010 	.word	0x08004010
 8000ba0:	20000030 	.word	0x20000030

08000ba4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d903      	bls.n	8000bc2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bba:	f06f 0301 	mvn.w	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e018      	b.n	8000bf4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2294      	movs	r2, #148	@ 0x94
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <BSP_COM_Init+0x5c>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f87b 	bl	8000cca <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2294      	movs	r2, #148	@ 0x94
 8000bd8:	fb02 f303 	mul.w	r3, r2, r3
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <BSP_COM_Init+0x5c>)
 8000bde:	4413      	add	r3, r2
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f80e 	bl	8000c04 <MX_LPUART1_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000bee:	f06f 0303 	mvn.w	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000e8 	.word	0x200000e8

08000c04 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_LPUART1_Init+0x60>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220c      	movs	r2, #12
 8000c22:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	895b      	ldrh	r3, [r3, #10]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	891b      	ldrh	r3, [r3, #8]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	899b      	ldrh	r3, [r3, #12]
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c50:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fd23 	bl	800269e <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000020 	.word	0x20000020

08000c68 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <__io_putchar+0x30>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	2394      	movs	r3, #148	@ 0x94
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <__io_putchar+0x34>)
 8000c7e:	1898      	adds	r0, r3, r2
 8000c80:	1d39      	adds	r1, r7, #4
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	2201      	movs	r2, #1
 8000c88:	f001 fd62 	bl	8002750 <HAL_UART_Transmit>
  return ch;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000017c 	.word	0x2000017c
 8000c9c:	200000e8 	.word	0x200000e8

08000ca0 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd31 	bl	800070c <BSP_PB_Callback>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}

08000cae <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fd2a 	bl	800070c <BSP_PB_Callback>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fd23 	bl	800070c <BSP_PB_Callback>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b088      	sub	sp, #32
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff fe41 	bl	800095a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fe3e 	bl	800095a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fe53 	bl	800098a <LL_APB1_GRP2_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d02:	f000 f9e3 	bl	80010cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d06:	2308      	movs	r3, #8
 8000d08:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d0e:	2308      	movs	r3, #8
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f000 f9d6 	bl	80010cc <HAL_GPIO_Init>
}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f95e 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d38:	f001 fba6 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <HAL_Init+0x3c>)
 8000d40:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f810 	bl	8000d68 <HAL_InitTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d54:	f7ff fd06 	bl	8000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000000 	.word	0x20000000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d024      	beq.n	8000dc6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d7c:	f001 fb84 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 8000d80:	4602      	mov	r2, r0
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_InitTick+0x6c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f960 	bl	800105a <HAL_SYSTICK_Config>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10f      	bne.n	8000dc0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	d809      	bhi.n	8000dba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dae:	f000 f92c 	bl	800100a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_InitTick+0x70>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e007      	b.n	8000dca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e004      	b.n	8000dca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000040 	.word	0x20000040
 8000dd8:	2000003c 	.word	0x2000003c

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a03      	ldr	r2, [pc, #12]	@ (8000dfc <HAL_IncTick+0x20>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000040 	.word	0x20000040
 8000dfc:	20000180 	.word	0x20000180

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	@ (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000180 	.word	0x20000180

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000040 	.word	0x20000040

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <__NVIC_EnableIRQ+0x34>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	@ (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f1c3 0307 	rsb	r3, r3, #7
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	bf28      	it	cs
 8000f6a:	2304      	movcs	r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3304      	adds	r3, #4
 8000f72:	2b06      	cmp	r3, #6
 8000f74:	d902      	bls.n	8000f7c <NVIC_EncodePriority+0x30>
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3b03      	subs	r3, #3
 8000f7a:	e000      	b.n	8000f7e <NVIC_EncodePriority+0x32>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	4313      	orrs	r3, r2
         );
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3724      	adds	r7, #36	@ 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd4:	f7ff ff90 	bl	8000ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff2d 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff44 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff92 	bl	8000f4c <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff61 	bl	8000ef8 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff37 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa4 	bl	8000fb0 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	460b      	mov	r3, r1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d103      	bne.n	8001092 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	605a      	str	r2, [r3, #4]
      break;
 8001090:	e002      	b.n	8001098 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	75fb      	strb	r3, [r7, #23]
      break;
 8001096:	bf00      	nop
  }

  return status;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
}
 800109a:	4618      	mov	r0, r3
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e003      	b.n	80010c0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80010be:	2300      	movs	r3, #0
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e140      	b.n	800135e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8132 	beq.w	8001358 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x40>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b03      	cmp	r3, #3
 8001178:	d017      	beq.n	80011aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	6939      	ldr	r1, [r7, #16]
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0203 	and.w	r2, r3, #3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 808c 	beq.w	8001358 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001240:	4a4e      	ldr	r2, [pc, #312]	@ (800137c <HAL_GPIO_Init+0x2b0>)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1bc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a44      	ldr	r2, [pc, #272]	@ (8001380 <HAL_GPIO_Init+0x2b4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1b8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a43      	ldr	r2, [pc, #268]	@ (8001384 <HAL_GPIO_Init+0x2b8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1b4>
 800127c:	2302      	movs	r3, #2
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x1be>
 8001280:	2307      	movs	r3, #7
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x1be>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x1be>
 8001288:	2300      	movs	r3, #0
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129a:	4938      	ldr	r1, [pc, #224]	@ (800137c <HAL_GPIO_Init+0x2b0>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a8:	4b37      	ldr	r3, [pc, #220]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f6:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 80012fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001302:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 800132c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001330:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <HAL_GPIO_Init+0x2bc>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f47f aeb7 	bne.w	80010dc <HAL_GPIO_Init+0x10>
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	58000800 	.word	0x58000800

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	400b      	ands	r3, r1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_PWR_EnableBkUpAccess+0x18>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a03      	ldr	r2, [pc, #12]	@ (8001404 <HAL_PWR_EnableBkUpAccess+0x18>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	58000400 	.word	0x58000400

08001408 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <LL_PWR_EnableBootC2+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a03      	ldr	r2, [pc, #12]	@ (8001420 <LL_PWR_EnableBootC2+0x18>)
 8001412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	58000400 	.word	0x58000400

08001424 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HAL_PWREx_GetVoltageRange+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	58000400 	.word	0x58000400

0800143c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001444:	f7ff ffe0 	bl	8001408 <LL_PWR_EnableBootC2>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800145c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001460:	d101      	bne.n	8001466 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	58000400 	.word	0x58000400

08001474 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001482:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800149e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80014be:	d101      	bne.n	80014c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001518:	d101      	bne.n	800151e <LL_RCC_HSE_IsReady+0x18>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_RCC_HSE_IsReady+0x1a>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001572:	d101      	bne.n	8001578 <LL_RCC_HSI_IsReady+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_RCC_HSI_IsReady+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d101      	bne.n	80015c2 <LL_RCC_LSE_IsReady+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_RCC_LSE_IsReady+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b02      	cmp	r3, #2
 800161e:	d101      	bne.n	8001624 <LL_RCC_LSI_IsReady+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_RCC_LSI_IsReady+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b02      	cmp	r3, #2
 8001676:	d101      	bne.n	800167c <LL_RCC_MSI_IsReady+0x16>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_RCC_MSI_IsReady+0x18>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b08      	cmp	r3, #8
 8001696:	d101      	bne.n	800169c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800174a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800176e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001772:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4313      	orrs	r3, r2
 800177a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001794:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001798:	f023 020f 	bic.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017a4:	4313      	orrs	r3, r2
 80017a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800181a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80018a6:	d101      	bne.n	80018ac <LL_RCC_PLL_IsReady+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_RCC_PLL_IsReady+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0303 	and.w	r3, r3, #3
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001922:	d101      	bne.n	8001928 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001946:	d101      	bne.n	800194c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196a:	d101      	bne.n	8001970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800198c:	d101      	bne.n	8001992 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019ae:	d101      	bne.n	80019b4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e36f      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	f7ff fea6 	bl	8001722 <LL_RCC_GetSysClkSource>
 80019d6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d8:	f7ff ff8f 	bl	80018fa <LL_RCC_PLL_GetMainSource>
 80019dc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80c4 	beq.w	8001b74 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_RCC_OscConfig+0x3e>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b0c      	cmp	r3, #12
 80019f6:	d176      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d173      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e353      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x68>
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a26:	e006      	b.n	8001a36 <HAL_RCC_OscConfig+0x76>
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d222      	bcs.n	8001a80 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fd5a 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e331      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe2b 	bl	80016d4 <LL_RCC_MSI_SetCalibTrimming>
 8001a7e:	e021      	b.n	8001ac4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe12 	bl	80016d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fd1f 	bl	80024f8 <RCC_SetFlashLatencyFromMSIRange>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e2f6      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ac4:	f000 fce0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4aa7      	ldr	r2, [pc, #668]	@ (8001d68 <HAL_RCC_OscConfig+0x3a8>)
 8001acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ace:	4ba7      	ldr	r3, [pc, #668]	@ (8001d6c <HAL_RCC_OscConfig+0x3ac>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f948 	bl	8000d68 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001adc:	7cfb      	ldrb	r3, [r7, #19]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d047      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	e2e5      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d02c      	beq.n	8001b48 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aee:	f7ff fd9e 	bl	800162e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af2:	f7ff f985 	bl	8000e00 <HAL_GetTick>
 8001af6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afa:	f7ff f981 	bl	8000e00 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e2d2      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b0c:	f7ff fdab 	bl	8001666 <LL_RCC_MSI_IsReady>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f1      	beq.n	8001afa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fdc7 	bl	80016d4 <LL_RCC_MSI_SetCalibTrimming>
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b48:	f7ff fd7f 	bl	800164a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f958 	bl	8000e00 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b54:	f7ff f954 	bl	8000e00 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e2a5      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b66:	f7ff fd7e 	bl	8001666 <LL_RCC_MSI_IsReady>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f1      	bne.n	8001b54 <HAL_RCC_OscConfig+0x194>
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b72:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d058      	beq.n	8001c32 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	d108      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d105      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d14b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e289      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x204>
 8001bbe:	f7ff fc86 	bl	80014ce <LL_RCC_HSE_Enable>
 8001bc2:	e00d      	b.n	8001be0 <HAL_RCC_OscConfig+0x220>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001bcc:	d104      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x218>
 8001bce:	f7ff fc51 	bl	8001474 <LL_RCC_HSE_EnableTcxo>
 8001bd2:	f7ff fc7c 	bl	80014ce <LL_RCC_HSE_Enable>
 8001bd6:	e003      	b.n	8001be0 <HAL_RCC_OscConfig+0x220>
 8001bd8:	f7ff fc87 	bl	80014ea <LL_RCC_HSE_Disable>
 8001bdc:	f7ff fc58 	bl	8001490 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f90a 	bl	8000e00 <HAL_GetTick>
 8001bec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f906 	bl	8000e00 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e257      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c02:	f7ff fc80 	bl	8001506 <LL_RCC_HSE_IsReady>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f1      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x230>
 8001c0c:	e011      	b.n	8001c32 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f8f7 	bl	8000e00 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c16:	f7ff f8f3 	bl	8000e00 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	@ 0x64
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e244      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c28:	f7ff fc6d 	bl	8001506 <LL_RCC_HSE_IsReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f1      	bne.n	8001c16 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d046      	beq.n	8001ccc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x290>
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d10e      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10b      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e22a      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fc8e 	bl	8001582 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c66:	e031      	b.n	8001ccc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d019      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c70:	f7ff fc5a 	bl	8001528 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8c4 	bl	8000e00 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f8c0 	bl	8000e00 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e211      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c8e:	f7ff fc67 	bl	8001560 <LL_RCC_HSI_IsReady>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f1      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc70 	bl	8001582 <LL_RCC_HSI_SetCalibTrimming>
 8001ca2:	e013      	b.n	8001ccc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca4:	f7ff fc4e 	bl	8001544 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f8aa 	bl	8000e00 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f8a6 	bl	8000e00 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1f7      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001cc2:	f7ff fc4d 	bl	8001560 <LL_RCC_HSI_IsReady>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f1      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06e      	beq.n	8001db6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d056      	beq.n	8001d8e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ce8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69da      	ldr	r2, [r3, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d031      	beq.n	8001d5c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e1d0      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d013      	beq.n	8001d42 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d1a:	f7ff fc67 	bl	80015ec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1e:	f7ff f86f 	bl	8000e00 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d26:	f7ff f86b 	bl	8000e00 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1bc      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d38:	f7ff fc68 	bl	800160c <LL_RCC_LSI_IsReady>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f1      	bne.n	8001d26 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	f023 0210 	bic.w	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5c:	f7ff fc36 	bl	80015cc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff f84e 	bl	8000e00 <HAL_GetTick>
 8001d64:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d66:	e00c      	b.n	8001d82 <HAL_RCC_OscConfig+0x3c2>
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	2000003c 	.word	0x2000003c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff f846 	bl	8000e00 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e197      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d82:	f7ff fc43 	bl	800160c <LL_RCC_LSI_IsReady>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f1      	beq.n	8001d70 <HAL_RCC_OscConfig+0x3b0>
 8001d8c:	e013      	b.n	8001db6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	f7ff fc2d 	bl	80015ec <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f835 	bl	8000e00 <HAL_GetTick>
 8001d96:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f831 	bl	8000e00 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e182      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001dac:	f7ff fc2e 	bl	800160c <LL_RCC_LSI_IsReady>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f1      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80d8 	beq.w	8001f74 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001dc4:	f7ff fb44 	bl	8001450 <LL_PWR_IsEnabledBkUpAccess>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d113      	bne.n	8001df6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001dce:	f7ff fb0d 	bl	80013ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f815 	bl	8000e00 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff f811 	bl	8000e00 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e162      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001dec:	f7ff fb30 	bl	8001450 <LL_PWR_IsEnabledBkUpAccess>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d07b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	2b85      	cmp	r3, #133	@ 0x85
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe ffed 	bl	8000e00 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe ffdf 	bl	8000e00 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e12e      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e54:	f7ff fba9 	bl	80015aa <LL_RCC_LSE_IsReady>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ef      	beq.n	8001e3e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b81      	cmp	r3, #129	@ 0x81
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b85      	cmp	r3, #133	@ 0x85
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe ffc7 	bl	8000e00 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe ffb9 	bl	8000e00 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e108      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ec      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001eb0:	e060      	b.n	8001f74 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe ffa5 	bl	8000e00 <HAL_GetTick>
 8001eb6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe ff97 	bl	8000e00 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0e6      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ec      	bne.n	8001ece <HAL_RCC_OscConfig+0x50e>
 8001ef4:	e03e      	b.n	8001f74 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe ff83 	bl	8000e00 <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe ff75 	bl	8000e00 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0c4      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ec      	bne.n	8001f12 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe ff62 	bl	8000e00 <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe ff54 	bl	8000e00 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0a3      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f6a:	f7ff fb1e 	bl	80015aa <LL_RCC_LSE_IsReady>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ef      	bne.n	8001f54 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8099 	beq.w	80020b0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d06c      	beq.n	800205e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d14b      	bne.n	8002024 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8c:	f7ff fc74 	bl	8001878 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe ff36 	bl	8000e00 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe ff32 	bl	8000e00 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b0a      	cmp	r3, #10
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e083      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001faa:	f7ff fc73 	bl	8001894 <LL_RCC_PLL_IsReady>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f1      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_RCC_OscConfig+0x6fc>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fcc:	0212      	lsls	r2, r2, #8
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fea:	f7ff fc37 	bl	800185c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe feff 	bl	8000e00 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe fefb 	bl	8000e00 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b0a      	cmp	r3, #10
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e04c      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002018:	f7ff fc3c 	bl	8001894 <LL_RCC_PLL_IsReady>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f1      	beq.n	8002006 <HAL_RCC_OscConfig+0x646>
 8002022:	e045      	b.n	80020b0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002024:	f7ff fc28 	bl	8001878 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe feea 	bl	8000e00 <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fee6 	bl	8000e00 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b0a      	cmp	r3, #10
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e037      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002042:	f7ff fc27 	bl	8001894 <LL_RCC_PLL_IsReady>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f1      	bne.n	8002030 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002056:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_RCC_OscConfig+0x700>)
 8002058:	4013      	ands	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
 800205c:	e028      	b.n	80020b0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e023      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	429a      	cmp	r2, r3
 800207e:	d115      	bne.n	80020ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	429a      	cmp	r2, r3
 800208c:	d10e      	bne.n	80020ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	429a      	cmp	r2, r3
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	11c1808c 	.word	0x11c1808c
 80020c0:	eefefffc 	.word	0xeefefffc

080020c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e12c      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b98      	ldr	r3, [pc, #608]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d91b      	bls.n	800211e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b95      	ldr	r3, [pc, #596]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4993      	ldr	r1, [pc, #588]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f6:	f7fe fe83 	bl	8000e00 <HAL_GetTick>
 80020fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020fe:	f7fe fe7f 	bl	8000e00 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e110      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002110:	4b8a      	ldr	r3, [pc, #552]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d1ef      	bne.n	80020fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d016      	beq.n	8002158 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb02 	bl	8001738 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002134:	f7fe fe64 	bl	8000e00 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800213c:	f7fe fe60 	bl	8000e00 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0f1      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800214e:	f7ff fbdf 	bl	8001910 <LL_RCC_IsActiveFlag_HPRE>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f1      	beq.n	800213c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff faf8 	bl	800175e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800216e:	f7fe fe47 	bl	8000e00 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002176:	f7fe fe43 	bl	8000e00 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0d4      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002188:	f7ff fbd3 	bl	8001932 <LL_RCC_IsActiveFlag_C2HPRE>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f1      	beq.n	8002176 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	d016      	beq.n	80021cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff faf0 	bl	8001788 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fe2a 	bl	8000e00 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021b0:	f7fe fe26 	bl	8000e00 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0b7      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80021c2:	f7ff fbc8 	bl	8001956 <LL_RCC_IsActiveFlag_SHDHPRE>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d016      	beq.n	8002206 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fae9 	bl	80017b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021e2:	f7fe fe0d 	bl	8000e00 <HAL_GetTick>
 80021e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021ea:	f7fe fe09 	bl	8000e00 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e09a      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021fc:	f7ff fbbd 	bl	800197a <LL_RCC_IsActiveFlag_PPRE1>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f1      	beq.n	80021ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fade 	bl	80017da <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800221e:	f7fe fdef 	bl	8000e00 <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002226:	f7fe fdeb 	bl	8000e00 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e07c      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002238:	f7ff fbb0 	bl	800199c <LL_RCC_IsActiveFlag_PPRE2>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f1      	beq.n	8002226 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d043      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d106      	bne.n	8002264 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002256:	f7ff f956 	bl	8001506 <LL_RCC_HSE_IsReady>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11e      	bne.n	800229e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e066      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d106      	bne.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800226c:	f7ff fb12 	bl	8001894 <LL_RCC_PLL_IsReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d113      	bne.n	800229e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e05b      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002282:	f7ff f9f0 	bl	8001666 <LL_RCC_MSI_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e050      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002290:	f7ff f966 	bl	8001560 <LL_RCC_HSI_IsReady>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e049      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa2a 	bl	80016fc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7fe fdaa 	bl	8000e00 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7fe fda6 	bl	8000e00 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e035      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	f7ff fa2c 	bl	8001722 <LL_RCC_GetSysClkSource>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d1ec      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d21b      	bcs.n	800231c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 0207 	bic.w	r2, r3, #7
 80022ec:	4913      	ldr	r1, [pc, #76]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7fe fd84 	bl	8000e00 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	e008      	b.n	800230e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022fc:	f7fe fd80 	bl	8000e00 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e011      	b.n	8002332 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_ClockConfig+0x278>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d1ef      	bne.n	80022fc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800231c:	f000 f8b4 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 8002320:	4603      	mov	r3, r0
 8002322:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <HAL_RCC_ClockConfig+0x27c>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_RCC_ClockConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fd1c 	bl	8000d68 <HAL_InitTick>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	58004000 	.word	0x58004000
 8002340:	20000000 	.word	0x20000000
 8002344:	2000003c 	.word	0x2000003c

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	f7ff f9e4 	bl	8001722 <LL_RCC_GetSysClkSource>
 800235a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800235c:	f7ff facd 	bl	80018fa <LL_RCC_PLL_GetMainSource>
 8002360:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x2c>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d139      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d136      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002374:	f7ff f987 	bl	8001686 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x62>
 800237e:	f7ff f982 	bl	8001686 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x4e>
 8002388:	f7ff f98d 	bl	80016a6 <LL_RCC_MSI_GetRange>
 800238c:	4603      	mov	r3, r0
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	e005      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002396:	f7ff f991 	bl	80016bc <LL_RCC_MSI_GetRangeAfterStandby>
 800239a:	4603      	mov	r3, r0
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a36      	ldr	r2, [pc, #216]	@ (800247c <HAL_RCC_GetSysClockFreq+0x134>)
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80023aa:	f7ff f96c 	bl	8001686 <LL_RCC_MSI_IsEnabledRangeSelect>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80023b4:	f7ff f977 	bl	80016a6 <LL_RCC_MSI_GetRange>
 80023b8:	4603      	mov	r3, r0
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	e005      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
 80023c2:	f7ff f97b 	bl	80016bc <LL_RCC_MSI_GetRangeAfterStandby>
 80023c6:	4603      	mov	r3, r0
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	4a2b      	ldr	r2, [pc, #172]	@ (800247c <HAL_RCC_GetSysClockFreq+0x134>)
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d115      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023e0:	e012      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x138>)
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e00c      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d109      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023f4:	f7ff f85a 	bl	80014ac <LL_RCC_HSE_IsEnabledDiv2>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x138>)
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e001      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002406:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	f7ff f98b 	bl	8001722 <LL_RCC_GetSysClkSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d12f      	bne.n	8002472 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002412:	f7ff fa72 	bl	80018fa <LL_RCC_PLL_GetMainSource>
 8002416:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0xde>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d003      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0xe4>
 8002424:	e00d      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x138>)
 8002428:	60fb      	str	r3, [r7, #12]
        break;
 800242a:	e00d      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800242c:	f7ff f83e 	bl	80014ac <LL_RCC_HSE_IsEnabledDiv2>
 8002430:	4603      	mov	r3, r0
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002436:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x138>)
 8002438:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x13c>)
 800243e:	60fb      	str	r3, [r7, #12]
        break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	60fb      	str	r3, [r7, #12]
        break;
 8002446:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002448:	f7ff fa35 	bl	80018b6 <LL_RCC_PLL_GetN>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	fb03 f402 	mul.w	r4, r3, r2
 8002454:	f7ff fa46 	bl	80018e4 <LL_RCC_PLL_GetDivider>
 8002458:	4603      	mov	r3, r0
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	3301      	adds	r3, #1
 800245e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002462:	f7ff fa34 	bl	80018ce <LL_RCC_PLL_GetR>
 8002466:	4603      	mov	r3, r0
 8002468:	0f5b      	lsrs	r3, r3, #29
 800246a:	3301      	adds	r3, #1
 800246c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002470:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002472:	697b      	ldr	r3, [r7, #20]
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	08003fc0 	.word	0x08003fc0
 8002480:	00f42400 	.word	0x00f42400
 8002484:	01e84800 	.word	0x01e84800

08002488 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b598      	push	{r3, r4, r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800248c:	f7ff ff5c 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002490:	4604      	mov	r4, r0
 8002492:	f7ff f9b5 	bl	8001800 <LL_RCC_GetAHBPrescaler>
 8002496:	4603      	mov	r3, r0
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a03      	ldr	r2, [pc, #12]	@ (80024ac <HAL_RCC_GetHCLKFreq+0x24>)
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd98      	pop	{r3, r4, r7, pc}
 80024ac:	08003f60 	.word	0x08003f60

080024b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b598      	push	{r3, r4, r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024b4:	f7ff ffe8 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024b8:	4604      	mov	r4, r0
 80024ba:	f7ff f9b9 	bl	8001830 <LL_RCC_GetAPB1Prescaler>
 80024be:	4603      	mov	r3, r0
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	4a03      	ldr	r2, [pc, #12]	@ (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd98      	pop	{r3, r4, r7, pc}
 80024d0:	08003fa0 	.word	0x08003fa0

080024d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b598      	push	{r3, r4, r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80024d8:	f7ff ffd6 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024dc:	4604      	mov	r4, r0
 80024de:	f7ff f9b2 	bl	8001846 <LL_RCC_GetAPB2Prescaler>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0adb      	lsrs	r3, r3, #11
 80024e6:	4a03      	ldr	r2, [pc, #12]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd98      	pop	{r3, r4, r7, pc}
 80024f4:	08003fa0 	.word	0x08003fa0

080024f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4a10      	ldr	r2, [pc, #64]	@ (800254c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002510:	f7ff f981 	bl	8001816 <LL_RCC_GetAHB3Prescaler>
 8002514:	4603      	mov	r3, r0
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	4a0c      	ldr	r2, [pc, #48]	@ (8002550 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9c      	lsrs	r4, r3, #18
 8002534:	f7fe ff76 	bl	8001424 <HAL_PWREx_GetVoltageRange>
 8002538:	4603      	mov	r3, r0
 800253a:	4619      	mov	r1, r3
 800253c:	4620      	mov	r0, r4
 800253e:	f000 f80b 	bl	8002558 <RCC_SetFlashLatency>
 8002542:	4603      	mov	r3, r0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}
 800254c:	08003fc0 	.word	0x08003fc0
 8002550:	08003f60 	.word	0x08003f60
 8002554:	431bde83 	.word	0x431bde83

08002558 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	@ 0x38
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002562:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <RCC_SetFlashLatency+0xf4>)
 8002564:	f107 0320 	add.w	r3, r7, #32
 8002568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800256c:	6018      	str	r0, [r3, #0]
 800256e:	3304      	adds	r3, #4
 8002570:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002572:	4a37      	ldr	r2, [pc, #220]	@ (8002650 <RCC_SetFlashLatency+0xf8>)
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	6018      	str	r0, [r3, #0]
 800257e:	3304      	adds	r3, #4
 8002580:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002582:	4a34      	ldr	r2, [pc, #208]	@ (8002654 <RCC_SetFlashLatency+0xfc>)
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	ca07      	ldmia	r2, {r0, r1, r2}
 800258a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002598:	d11b      	bne.n	80025d2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800259a:	2300      	movs	r3, #0
 800259c:	633b      	str	r3, [r7, #48]	@ 0x30
 800259e:	e014      	b.n	80025ca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	3338      	adds	r3, #56	@ 0x38
 80025a6:	443b      	add	r3, r7
 80025a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d807      	bhi.n	80025c4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3338      	adds	r3, #56	@ 0x38
 80025ba:	443b      	add	r3, r7
 80025bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025c2:	e021      	b.n	8002608 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	3301      	adds	r3, #1
 80025c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d9e7      	bls.n	80025a0 <RCC_SetFlashLatency+0x48>
 80025d0:	e01a      	b.n	8002608 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80025d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	3338      	adds	r3, #56	@ 0x38
 80025de:	443b      	add	r3, r7
 80025e0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d807      	bhi.n	80025fc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3338      	adds	r3, #56	@ 0x38
 80025f2:	443b      	add	r3, r7
 80025f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80025fa:	e005      	b.n	8002608 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025fe:	3301      	adds	r3, #1
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	2b02      	cmp	r3, #2
 8002606:	d9e7      	bls.n	80025d8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <RCC_SetFlashLatency+0x100>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0207 	bic.w	r2, r3, #7
 8002610:	4911      	ldr	r1, [pc, #68]	@ (8002658 <RCC_SetFlashLatency+0x100>)
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002618:	f7fe fbf2 	bl	8000e00 <HAL_GetTick>
 800261c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800261e:	e008      	b.n	8002632 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002620:	f7fe fbee 	bl	8000e00 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e007      	b.n	8002642 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <RCC_SetFlashLatency+0x100>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800263c:	429a      	cmp	r2, r3
 800263e:	d1ef      	bne.n	8002620 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3738      	adds	r7, #56	@ 0x38
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	08003f44 	.word	0x08003f44
 8002650:	08003f4c 	.word	0x08003f4c
 8002654:	08003f54 	.word	0x08003f54
 8002658:	58004000 	.word	0x58004000

0800265c <LL_RCC_GetUSARTClockSource>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002668:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	4313      	orrs	r3, r2
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <LL_RCC_GetLPUARTClockSource>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800268c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4013      	ands	r3, r2
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e042      	b.n	8002736 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f83b 	bl	800273e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	@ 0x24
 80026cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fb2b 	bl	8002d44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8b4 	bl	800285c <UART_SetConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01b      	b.n	8002736 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800270c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800271c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fba9 	bl	8002e86 <UART_CheckIdleState>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	2b20      	cmp	r3, #32
 8002768:	d173      	bne.n	8002852 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_Transmit+0x26>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06c      	b.n	8002854 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2221      	movs	r2, #33	@ 0x21
 8002786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800278a:	f7fe fb39 	bl	8000e00 <HAL_GetTick>
 800278e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a8:	d108      	bne.n	80027bc <HAL_UART_Transmit+0x6c>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e003      	b.n	80027c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027c4:	e02c      	b.n	8002820 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2200      	movs	r2, #0
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fba6 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e039      	b.n	8002854 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	3302      	adds	r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	e007      	b.n	800280e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3301      	adds	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1cc      	bne.n	80027c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2200      	movs	r2, #0
 8002834:	2140      	movs	r1, #64	@ 0x40
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fb73 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e006      	b.n	8002854 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	b08c      	sub	sp, #48	@ 0x30
 8002862:	af00      	add	r7, sp, #0
 8002864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	431a      	orrs	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	431a      	orrs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	4313      	orrs	r3, r2
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b94      	ldr	r3, [pc, #592]	@ (8002adc <UART_SetConfig+0x280>)
 800288c:	4013      	ands	r3, r2
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002894:	430b      	orrs	r3, r1
 8002896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a89      	ldr	r2, [pc, #548]	@ (8002ae0 <UART_SetConfig+0x284>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c4:	4313      	orrs	r3, r2
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80028d2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028dc:	430b      	orrs	r3, r1
 80028de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	f023 010f 	bic.w	r1, r3, #15
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7a      	ldr	r2, [pc, #488]	@ (8002ae4 <UART_SetConfig+0x288>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d127      	bne.n	8002950 <UART_SetConfig+0xf4>
 8002900:	2003      	movs	r0, #3
 8002902:	f7ff feab 	bl	800265c <LL_RCC_GetUSARTClockSource>
 8002906:	4603      	mov	r3, r0
 8002908:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800290c:	2b03      	cmp	r3, #3
 800290e:	d81b      	bhi.n	8002948 <UART_SetConfig+0xec>
 8002910:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <UART_SetConfig+0xbc>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002929 	.word	0x08002929
 800291c:	08002939 	.word	0x08002939
 8002920:	08002931 	.word	0x08002931
 8002924:	08002941 	.word	0x08002941
 8002928:	2301      	movs	r3, #1
 800292a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800292e:	e080      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002930:	2302      	movs	r3, #2
 8002932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002936:	e07c      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002938:	2304      	movs	r3, #4
 800293a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800293e:	e078      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002940:	2308      	movs	r3, #8
 8002942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002946:	e074      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002948:	2310      	movs	r3, #16
 800294a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800294e:	e070      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a64      	ldr	r2, [pc, #400]	@ (8002ae8 <UART_SetConfig+0x28c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d138      	bne.n	80029cc <UART_SetConfig+0x170>
 800295a:	200c      	movs	r0, #12
 800295c:	f7ff fe7e 	bl	800265c <LL_RCC_GetUSARTClockSource>
 8002960:	4603      	mov	r3, r0
 8002962:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d82c      	bhi.n	80029c4 <UART_SetConfig+0x168>
 800296a:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <UART_SetConfig+0x114>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029a5 	.word	0x080029a5
 8002974:	080029c5 	.word	0x080029c5
 8002978:	080029c5 	.word	0x080029c5
 800297c:	080029c5 	.word	0x080029c5
 8002980:	080029b5 	.word	0x080029b5
 8002984:	080029c5 	.word	0x080029c5
 8002988:	080029c5 	.word	0x080029c5
 800298c:	080029c5 	.word	0x080029c5
 8002990:	080029ad 	.word	0x080029ad
 8002994:	080029c5 	.word	0x080029c5
 8002998:	080029c5 	.word	0x080029c5
 800299c:	080029c5 	.word	0x080029c5
 80029a0:	080029bd 	.word	0x080029bd
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029aa:	e042      	b.n	8002a32 <UART_SetConfig+0x1d6>
 80029ac:	2302      	movs	r3, #2
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029b2:	e03e      	b.n	8002a32 <UART_SetConfig+0x1d6>
 80029b4:	2304      	movs	r3, #4
 80029b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ba:	e03a      	b.n	8002a32 <UART_SetConfig+0x1d6>
 80029bc:	2308      	movs	r3, #8
 80029be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029c2:	e036      	b.n	8002a32 <UART_SetConfig+0x1d6>
 80029c4:	2310      	movs	r3, #16
 80029c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ca:	e032      	b.n	8002a32 <UART_SetConfig+0x1d6>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a43      	ldr	r2, [pc, #268]	@ (8002ae0 <UART_SetConfig+0x284>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12a      	bne.n	8002a2c <UART_SetConfig+0x1d0>
 80029d6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80029da:	f7ff fe51 	bl	8002680 <LL_RCC_GetLPUARTClockSource>
 80029de:	4603      	mov	r3, r0
 80029e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029e4:	d01a      	beq.n	8002a1c <UART_SetConfig+0x1c0>
 80029e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029ea:	d81b      	bhi.n	8002a24 <UART_SetConfig+0x1c8>
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f0:	d00c      	beq.n	8002a0c <UART_SetConfig+0x1b0>
 80029f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f6:	d815      	bhi.n	8002a24 <UART_SetConfig+0x1c8>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <UART_SetConfig+0x1a8>
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a00:	d008      	beq.n	8002a14 <UART_SetConfig+0x1b8>
 8002a02:	e00f      	b.n	8002a24 <UART_SetConfig+0x1c8>
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a0a:	e012      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a12:	e00e      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002a14:	2304      	movs	r3, #4
 8002a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a1a:	e00a      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a22:	e006      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002a24:	2310      	movs	r3, #16
 8002a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a2a:	e002      	b.n	8002a32 <UART_SetConfig+0x1d6>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ae0 <UART_SetConfig+0x284>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 80a4 	bne.w	8002b86 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d823      	bhi.n	8002a8e <UART_SetConfig+0x232>
 8002a46:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <UART_SetConfig+0x1f0>)
 8002a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4c:	08002a71 	.word	0x08002a71
 8002a50:	08002a8f 	.word	0x08002a8f
 8002a54:	08002a79 	.word	0x08002a79
 8002a58:	08002a8f 	.word	0x08002a8f
 8002a5c:	08002a7f 	.word	0x08002a7f
 8002a60:	08002a8f 	.word	0x08002a8f
 8002a64:	08002a8f 	.word	0x08002a8f
 8002a68:	08002a8f 	.word	0x08002a8f
 8002a6c:	08002a87 	.word	0x08002a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff fd1e 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8002a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a76:	e010      	b.n	8002a9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <UART_SetConfig+0x290>)
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a7c:	e00d      	b.n	8002a9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a7e:	f7ff fc63 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a84:	e009      	b.n	8002a9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a8c:	e005      	b.n	8002a9a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8137 	beq.w	8002d10 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <UART_SetConfig+0x294>)
 8002aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aac:	461a      	mov	r2, r3
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d305      	bcc.n	8002ad2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d910      	bls.n	8002af4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ad8:	e11a      	b.n	8002d10 <UART_SetConfig+0x4b4>
 8002ada:	bf00      	nop
 8002adc:	cfff69f3 	.word	0xcfff69f3
 8002ae0:	40008000 	.word	0x40008000
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	08004020 	.word	0x08004020
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	2200      	movs	r2, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	60fa      	str	r2, [r7, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	4a8e      	ldr	r2, [pc, #568]	@ (8002d3c <UART_SetConfig+0x4e0>)
 8002b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b16:	f7fd fb83 	bl	8000220 <__aeabi_uldivmod>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	020b      	lsls	r3, r1, #8
 8002b2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b30:	0202      	lsls	r2, r0, #8
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	6849      	ldr	r1, [r1, #4]
 8002b36:	0849      	lsrs	r1, r1, #1
 8002b38:	2000      	movs	r0, #0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	eb12 0804 	adds.w	r8, r2, r4
 8002b42:	eb43 0905 	adc.w	r9, r3, r5
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	469a      	mov	sl, r3
 8002b4e:	4693      	mov	fp, r2
 8002b50:	4652      	mov	r2, sl
 8002b52:	465b      	mov	r3, fp
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fb62 	bl	8000220 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b6a:	d308      	bcc.n	8002b7e <UART_SetConfig+0x322>
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b72:	d204      	bcs.n	8002b7e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e0c8      	b.n	8002d10 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b84:	e0c4      	b.n	8002d10 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b8e:	d167      	bne.n	8002c60 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002b90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d828      	bhi.n	8002bea <UART_SetConfig+0x38e>
 8002b98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <UART_SetConfig+0x344>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bc5 	.word	0x08002bc5
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	08002bd5 	.word	0x08002bd5
 8002bac:	08002beb 	.word	0x08002beb
 8002bb0:	08002bdb 	.word	0x08002bdb
 8002bb4:	08002beb 	.word	0x08002beb
 8002bb8:	08002beb 	.word	0x08002beb
 8002bbc:	08002beb 	.word	0x08002beb
 8002bc0:	08002be3 	.word	0x08002be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc4:	f7ff fc74 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8002bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bca:	e014      	b.n	8002bf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bcc:	f7ff fc82 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bd2:	e010      	b.n	8002bf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d40 <UART_SetConfig+0x4e4>)
 8002bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bd8:	e00d      	b.n	8002bf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bda:	f7ff fbb5 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002bde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002be0:	e009      	b.n	8002bf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002be8:	e005      	b.n	8002bf6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8089 	beq.w	8002d10 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	4a4e      	ldr	r2, [pc, #312]	@ (8002d3c <UART_SetConfig+0x4e0>)
 8002c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c10:	005a      	lsls	r2, r3, #1
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	441a      	add	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	2b0f      	cmp	r3, #15
 8002c28:	d916      	bls.n	8002c58 <UART_SetConfig+0x3fc>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d212      	bcs.n	8002c58 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f023 030f 	bic.w	r3, r3, #15
 8002c3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	8bfb      	ldrh	r3, [r7, #30]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	8bfa      	ldrh	r2, [r7, #30]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	e05b      	b.n	8002d10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c5e:	e057      	b.n	8002d10 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d828      	bhi.n	8002cba <UART_SetConfig+0x45e>
 8002c68:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <UART_SetConfig+0x414>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c95 	.word	0x08002c95
 8002c74:	08002c9d 	.word	0x08002c9d
 8002c78:	08002ca5 	.word	0x08002ca5
 8002c7c:	08002cbb 	.word	0x08002cbb
 8002c80:	08002cab 	.word	0x08002cab
 8002c84:	08002cbb 	.word	0x08002cbb
 8002c88:	08002cbb 	.word	0x08002cbb
 8002c8c:	08002cbb 	.word	0x08002cbb
 8002c90:	08002cb3 	.word	0x08002cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c94:	f7ff fc0c 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8002c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c9a:	e014      	b.n	8002cc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff fc1a 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ca2:	e010      	b.n	8002cc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca4:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <UART_SetConfig+0x4e4>)
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ca8:	e00d      	b.n	8002cc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002caa:	f7ff fb4d 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002cae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002cb0:	e009      	b.n	8002cc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002cb8:	e005      	b.n	8002cc6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002cc4:	bf00      	nop
    }

    if (pclk != 0U)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d021      	beq.n	8002d10 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <UART_SetConfig+0x4e0>)
 8002cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	085b      	lsrs	r3, r3, #1
 8002ce4:	441a      	add	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	d909      	bls.n	8002d0a <UART_SetConfig+0x4ae>
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfc:	d205      	bcs.n	8002d0a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	e002      	b.n	8002d10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002d2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3730      	adds	r7, #48	@ 0x30
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08004020 	.word	0x08004020
 8002d40:	00f42400 	.word	0x00f42400

08002d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01a      	beq.n	8002e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e42:	d10a      	bne.n	8002e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	605a      	str	r2, [r3, #4]
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e96:	f7fd ffb3 	bl	8000e00 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d10e      	bne.n	8002ec8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eaa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f832 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e028      	b.n	8002f1a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d10e      	bne.n	8002ef4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ed6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f81c 	bl	8002f22 <UART_WaitOnFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e012      	b.n	8002f1a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b09c      	sub	sp, #112	@ 0x70
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f32:	e0af      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f3a:	f000 80ab 	beq.w	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fd ff5f 	bl	8000e00 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d140      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f64:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002f68:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f74:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8002f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e6      	bne.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002fa6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002fa8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e06f      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d057      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b80      	cmp	r3, #128	@ 0x80
 8002fe8:	d054      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d051      	beq.n	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ffe:	d149      	bne.n	8003094 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800301e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003028:	637b      	str	r3, [r7, #52]	@ 0x34
 800302a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e6      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3308      	adds	r3, #8
 8003042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	613b      	str	r3, [r7, #16]
   return(result);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800305c:	623a      	str	r2, [r7, #32]
 800305e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	6a3a      	ldr	r2, [r7, #32]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	61bb      	str	r3, [r7, #24]
   return(result);
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e010      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	4013      	ands	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f43f af40 	beq.w	8002f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3770      	adds	r7, #112	@ 0x70
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <std>:
 80030c0:	2300      	movs	r3, #0
 80030c2:	b510      	push	{r4, lr}
 80030c4:	4604      	mov	r4, r0
 80030c6:	e9c0 3300 	strd	r3, r3, [r0]
 80030ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ce:	6083      	str	r3, [r0, #8]
 80030d0:	8181      	strh	r1, [r0, #12]
 80030d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80030d4:	81c2      	strh	r2, [r0, #14]
 80030d6:	6183      	str	r3, [r0, #24]
 80030d8:	4619      	mov	r1, r3
 80030da:	2208      	movs	r2, #8
 80030dc:	305c      	adds	r0, #92	@ 0x5c
 80030de:	f000 f906 	bl	80032ee <memset>
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <std+0x58>)
 80030e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <std+0x5c>)
 80030e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <std+0x60>)
 80030ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <std+0x64>)
 80030f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <std+0x68>)
 80030f4:	6224      	str	r4, [r4, #32]
 80030f6:	429c      	cmp	r4, r3
 80030f8:	d006      	beq.n	8003108 <std+0x48>
 80030fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030fe:	4294      	cmp	r4, r2
 8003100:	d002      	beq.n	8003108 <std+0x48>
 8003102:	33d0      	adds	r3, #208	@ 0xd0
 8003104:	429c      	cmp	r4, r3
 8003106:	d105      	bne.n	8003114 <std+0x54>
 8003108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003110:	f000 b966 	b.w	80033e0 <__retarget_lock_init_recursive>
 8003114:	bd10      	pop	{r4, pc}
 8003116:	bf00      	nop
 8003118:	08003269 	.word	0x08003269
 800311c:	0800328b 	.word	0x0800328b
 8003120:	080032c3 	.word	0x080032c3
 8003124:	080032e7 	.word	0x080032e7
 8003128:	20000184 	.word	0x20000184

0800312c <stdio_exit_handler>:
 800312c:	4a02      	ldr	r2, [pc, #8]	@ (8003138 <stdio_exit_handler+0xc>)
 800312e:	4903      	ldr	r1, [pc, #12]	@ (800313c <stdio_exit_handler+0x10>)
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <stdio_exit_handler+0x14>)
 8003132:	f000 b869 	b.w	8003208 <_fwalk_sglue>
 8003136:	bf00      	nop
 8003138:	20000044 	.word	0x20000044
 800313c:	08003c71 	.word	0x08003c71
 8003140:	20000054 	.word	0x20000054

08003144 <cleanup_stdio>:
 8003144:	6841      	ldr	r1, [r0, #4]
 8003146:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <cleanup_stdio+0x34>)
 8003148:	4299      	cmp	r1, r3
 800314a:	b510      	push	{r4, lr}
 800314c:	4604      	mov	r4, r0
 800314e:	d001      	beq.n	8003154 <cleanup_stdio+0x10>
 8003150:	f000 fd8e 	bl	8003c70 <_fflush_r>
 8003154:	68a1      	ldr	r1, [r4, #8]
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <cleanup_stdio+0x38>)
 8003158:	4299      	cmp	r1, r3
 800315a:	d002      	beq.n	8003162 <cleanup_stdio+0x1e>
 800315c:	4620      	mov	r0, r4
 800315e:	f000 fd87 	bl	8003c70 <_fflush_r>
 8003162:	68e1      	ldr	r1, [r4, #12]
 8003164:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <cleanup_stdio+0x3c>)
 8003166:	4299      	cmp	r1, r3
 8003168:	d004      	beq.n	8003174 <cleanup_stdio+0x30>
 800316a:	4620      	mov	r0, r4
 800316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003170:	f000 bd7e 	b.w	8003c70 <_fflush_r>
 8003174:	bd10      	pop	{r4, pc}
 8003176:	bf00      	nop
 8003178:	20000184 	.word	0x20000184
 800317c:	200001ec 	.word	0x200001ec
 8003180:	20000254 	.word	0x20000254

08003184 <global_stdio_init.part.0>:
 8003184:	b510      	push	{r4, lr}
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <global_stdio_init.part.0+0x30>)
 8003188:	4c0b      	ldr	r4, [pc, #44]	@ (80031b8 <global_stdio_init.part.0+0x34>)
 800318a:	4a0c      	ldr	r2, [pc, #48]	@ (80031bc <global_stdio_init.part.0+0x38>)
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4620      	mov	r0, r4
 8003190:	2200      	movs	r2, #0
 8003192:	2104      	movs	r1, #4
 8003194:	f7ff ff94 	bl	80030c0 <std>
 8003198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800319c:	2201      	movs	r2, #1
 800319e:	2109      	movs	r1, #9
 80031a0:	f7ff ff8e 	bl	80030c0 <std>
 80031a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031a8:	2202      	movs	r2, #2
 80031aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ae:	2112      	movs	r1, #18
 80031b0:	f7ff bf86 	b.w	80030c0 <std>
 80031b4:	200002bc 	.word	0x200002bc
 80031b8:	20000184 	.word	0x20000184
 80031bc:	0800312d 	.word	0x0800312d

080031c0 <__sfp_lock_acquire>:
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <__sfp_lock_acquire+0x8>)
 80031c2:	f000 b90e 	b.w	80033e2 <__retarget_lock_acquire_recursive>
 80031c6:	bf00      	nop
 80031c8:	200002c5 	.word	0x200002c5

080031cc <__sfp_lock_release>:
 80031cc:	4801      	ldr	r0, [pc, #4]	@ (80031d4 <__sfp_lock_release+0x8>)
 80031ce:	f000 b909 	b.w	80033e4 <__retarget_lock_release_recursive>
 80031d2:	bf00      	nop
 80031d4:	200002c5 	.word	0x200002c5

080031d8 <__sinit>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
 80031dc:	f7ff fff0 	bl	80031c0 <__sfp_lock_acquire>
 80031e0:	6a23      	ldr	r3, [r4, #32]
 80031e2:	b11b      	cbz	r3, 80031ec <__sinit+0x14>
 80031e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e8:	f7ff bff0 	b.w	80031cc <__sfp_lock_release>
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <__sinit+0x28>)
 80031ee:	6223      	str	r3, [r4, #32]
 80031f0:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <__sinit+0x2c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f5      	bne.n	80031e4 <__sinit+0xc>
 80031f8:	f7ff ffc4 	bl	8003184 <global_stdio_init.part.0>
 80031fc:	e7f2      	b.n	80031e4 <__sinit+0xc>
 80031fe:	bf00      	nop
 8003200:	08003145 	.word	0x08003145
 8003204:	200002bc 	.word	0x200002bc

08003208 <_fwalk_sglue>:
 8003208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800320c:	4607      	mov	r7, r0
 800320e:	4688      	mov	r8, r1
 8003210:	4614      	mov	r4, r2
 8003212:	2600      	movs	r6, #0
 8003214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003218:	f1b9 0901 	subs.w	r9, r9, #1
 800321c:	d505      	bpl.n	800322a <_fwalk_sglue+0x22>
 800321e:	6824      	ldr	r4, [r4, #0]
 8003220:	2c00      	cmp	r4, #0
 8003222:	d1f7      	bne.n	8003214 <_fwalk_sglue+0xc>
 8003224:	4630      	mov	r0, r6
 8003226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322a:	89ab      	ldrh	r3, [r5, #12]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d907      	bls.n	8003240 <_fwalk_sglue+0x38>
 8003230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003234:	3301      	adds	r3, #1
 8003236:	d003      	beq.n	8003240 <_fwalk_sglue+0x38>
 8003238:	4629      	mov	r1, r5
 800323a:	4638      	mov	r0, r7
 800323c:	47c0      	blx	r8
 800323e:	4306      	orrs	r6, r0
 8003240:	3568      	adds	r5, #104	@ 0x68
 8003242:	e7e9      	b.n	8003218 <_fwalk_sglue+0x10>

08003244 <iprintf>:
 8003244:	b40f      	push	{r0, r1, r2, r3}
 8003246:	b507      	push	{r0, r1, r2, lr}
 8003248:	4906      	ldr	r1, [pc, #24]	@ (8003264 <iprintf+0x20>)
 800324a:	ab04      	add	r3, sp, #16
 800324c:	6808      	ldr	r0, [r1, #0]
 800324e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003252:	6881      	ldr	r1, [r0, #8]
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	f000 f9e7 	bl	8003628 <_vfiprintf_r>
 800325a:	b003      	add	sp, #12
 800325c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003260:	b004      	add	sp, #16
 8003262:	4770      	bx	lr
 8003264:	20000050 	.word	0x20000050

08003268 <__sread>:
 8003268:	b510      	push	{r4, lr}
 800326a:	460c      	mov	r4, r1
 800326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003270:	f000 f868 	bl	8003344 <_read_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	bfab      	itete	ge
 8003278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800327a:	89a3      	ldrhlt	r3, [r4, #12]
 800327c:	181b      	addge	r3, r3, r0
 800327e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003282:	bfac      	ite	ge
 8003284:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003286:	81a3      	strhlt	r3, [r4, #12]
 8003288:	bd10      	pop	{r4, pc}

0800328a <__swrite>:
 800328a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800328e:	461f      	mov	r7, r3
 8003290:	898b      	ldrh	r3, [r1, #12]
 8003292:	05db      	lsls	r3, r3, #23
 8003294:	4605      	mov	r5, r0
 8003296:	460c      	mov	r4, r1
 8003298:	4616      	mov	r6, r2
 800329a:	d505      	bpl.n	80032a8 <__swrite+0x1e>
 800329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a0:	2302      	movs	r3, #2
 80032a2:	2200      	movs	r2, #0
 80032a4:	f000 f83c 	bl	8003320 <_lseek_r>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b2:	81a3      	strh	r3, [r4, #12]
 80032b4:	4632      	mov	r2, r6
 80032b6:	463b      	mov	r3, r7
 80032b8:	4628      	mov	r0, r5
 80032ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032be:	f000 b853 	b.w	8003368 <_write_r>

080032c2 <__sseek>:
 80032c2:	b510      	push	{r4, lr}
 80032c4:	460c      	mov	r4, r1
 80032c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ca:	f000 f829 	bl	8003320 <_lseek_r>
 80032ce:	1c43      	adds	r3, r0, #1
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	bf15      	itete	ne
 80032d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032de:	81a3      	strheq	r3, [r4, #12]
 80032e0:	bf18      	it	ne
 80032e2:	81a3      	strhne	r3, [r4, #12]
 80032e4:	bd10      	pop	{r4, pc}

080032e6 <__sclose>:
 80032e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ea:	f000 b809 	b.w	8003300 <_close_r>

080032ee <memset>:
 80032ee:	4402      	add	r2, r0
 80032f0:	4603      	mov	r3, r0
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d100      	bne.n	80032f8 <memset+0xa>
 80032f6:	4770      	bx	lr
 80032f8:	f803 1b01 	strb.w	r1, [r3], #1
 80032fc:	e7f9      	b.n	80032f2 <memset+0x4>
	...

08003300 <_close_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4d06      	ldr	r5, [pc, #24]	@ (800331c <_close_r+0x1c>)
 8003304:	2300      	movs	r3, #0
 8003306:	4604      	mov	r4, r0
 8003308:	4608      	mov	r0, r1
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	f7fd fa95 	bl	800083a <_close>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d102      	bne.n	800331a <_close_r+0x1a>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	b103      	cbz	r3, 800331a <_close_r+0x1a>
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	bd38      	pop	{r3, r4, r5, pc}
 800331c:	200002c0 	.word	0x200002c0

08003320 <_lseek_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4d07      	ldr	r5, [pc, #28]	@ (8003340 <_lseek_r+0x20>)
 8003324:	4604      	mov	r4, r0
 8003326:	4608      	mov	r0, r1
 8003328:	4611      	mov	r1, r2
 800332a:	2200      	movs	r2, #0
 800332c:	602a      	str	r2, [r5, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	f7fd faa7 	bl	8000882 <_lseek>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_lseek_r+0x1e>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_lseek_r+0x1e>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	200002c0 	.word	0x200002c0

08003344 <_read_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4d07      	ldr	r5, [pc, #28]	@ (8003364 <_read_r+0x20>)
 8003348:	4604      	mov	r4, r0
 800334a:	4608      	mov	r0, r1
 800334c:	4611      	mov	r1, r2
 800334e:	2200      	movs	r2, #0
 8003350:	602a      	str	r2, [r5, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f7fd fa38 	bl	80007c8 <_read>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_read_r+0x1e>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b103      	cbz	r3, 8003362 <_read_r+0x1e>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	200002c0 	.word	0x200002c0

08003368 <_write_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4d07      	ldr	r5, [pc, #28]	@ (8003388 <_write_r+0x20>)
 800336c:	4604      	mov	r4, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	2200      	movs	r2, #0
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7fd fa43 	bl	8000802 <_write>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_write_r+0x1e>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	b103      	cbz	r3, 8003386 <_write_r+0x1e>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	200002c0 	.word	0x200002c0

0800338c <__errno>:
 800338c:	4b01      	ldr	r3, [pc, #4]	@ (8003394 <__errno+0x8>)
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000050 	.word	0x20000050

08003398 <__libc_init_array>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4d0d      	ldr	r5, [pc, #52]	@ (80033d0 <__libc_init_array+0x38>)
 800339c:	4c0d      	ldr	r4, [pc, #52]	@ (80033d4 <__libc_init_array+0x3c>)
 800339e:	1b64      	subs	r4, r4, r5
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	2600      	movs	r6, #0
 80033a4:	42a6      	cmp	r6, r4
 80033a6:	d109      	bne.n	80033bc <__libc_init_array+0x24>
 80033a8:	4d0b      	ldr	r5, [pc, #44]	@ (80033d8 <__libc_init_array+0x40>)
 80033aa:	4c0c      	ldr	r4, [pc, #48]	@ (80033dc <__libc_init_array+0x44>)
 80033ac:	f000 fdb0 	bl	8003f10 <_init>
 80033b0:	1b64      	subs	r4, r4, r5
 80033b2:	10a4      	asrs	r4, r4, #2
 80033b4:	2600      	movs	r6, #0
 80033b6:	42a6      	cmp	r6, r4
 80033b8:	d105      	bne.n	80033c6 <__libc_init_array+0x2e>
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
 80033bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c0:	4798      	blx	r3
 80033c2:	3601      	adds	r6, #1
 80033c4:	e7ee      	b.n	80033a4 <__libc_init_array+0xc>
 80033c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ca:	4798      	blx	r3
 80033cc:	3601      	adds	r6, #1
 80033ce:	e7f2      	b.n	80033b6 <__libc_init_array+0x1e>
 80033d0:	08004074 	.word	0x08004074
 80033d4:	08004074 	.word	0x08004074
 80033d8:	08004074 	.word	0x08004074
 80033dc:	08004078 	.word	0x08004078

080033e0 <__retarget_lock_init_recursive>:
 80033e0:	4770      	bx	lr

080033e2 <__retarget_lock_acquire_recursive>:
 80033e2:	4770      	bx	lr

080033e4 <__retarget_lock_release_recursive>:
 80033e4:	4770      	bx	lr
	...

080033e8 <_free_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4605      	mov	r5, r0
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d041      	beq.n	8003474 <_free_r+0x8c>
 80033f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033f4:	1f0c      	subs	r4, r1, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfb8      	it	lt
 80033fa:	18e4      	addlt	r4, r4, r3
 80033fc:	f000 f8e0 	bl	80035c0 <__malloc_lock>
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <_free_r+0x90>)
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	b933      	cbnz	r3, 8003414 <_free_r+0x2c>
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6014      	str	r4, [r2, #0]
 800340a:	4628      	mov	r0, r5
 800340c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003410:	f000 b8dc 	b.w	80035cc <__malloc_unlock>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d908      	bls.n	800342a <_free_r+0x42>
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	1821      	adds	r1, r4, r0
 800341c:	428b      	cmp	r3, r1
 800341e:	bf01      	itttt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	1809      	addeq	r1, r1, r0
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	e7ed      	b.n	8003406 <_free_r+0x1e>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x4c>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x42>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1850      	adds	r0, r2, r1
 8003438:	42a0      	cmp	r0, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x6c>
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	4401      	add	r1, r0
 8003440:	1850      	adds	r0, r2, r1
 8003442:	4283      	cmp	r3, r0
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1e0      	bne.n	800340a <_free_r+0x22>
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	4408      	add	r0, r1
 8003450:	6010      	str	r0, [r2, #0]
 8003452:	e7da      	b.n	800340a <_free_r+0x22>
 8003454:	d902      	bls.n	800345c <_free_r+0x74>
 8003456:	230c      	movs	r3, #12
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	e7d6      	b.n	800340a <_free_r+0x22>
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	1821      	adds	r1, r4, r0
 8003460:	428b      	cmp	r3, r1
 8003462:	bf04      	itt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	bf04      	itt	eq
 800346c:	1809      	addeq	r1, r1, r0
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6054      	str	r4, [r2, #4]
 8003472:	e7ca      	b.n	800340a <_free_r+0x22>
 8003474:	bd38      	pop	{r3, r4, r5, pc}
 8003476:	bf00      	nop
 8003478:	200002cc 	.word	0x200002cc

0800347c <sbrk_aligned>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0f      	ldr	r6, [pc, #60]	@ (80034bc <sbrk_aligned+0x40>)
 8003480:	460c      	mov	r4, r1
 8003482:	6831      	ldr	r1, [r6, #0]
 8003484:	4605      	mov	r5, r0
 8003486:	b911      	cbnz	r1, 800348e <sbrk_aligned+0x12>
 8003488:	f000 fcae 	bl	8003de8 <_sbrk_r>
 800348c:	6030      	str	r0, [r6, #0]
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 fca9 	bl	8003de8 <_sbrk_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d103      	bne.n	80034a2 <sbrk_aligned+0x26>
 800349a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800349e:	4620      	mov	r0, r4
 80034a0:	bd70      	pop	{r4, r5, r6, pc}
 80034a2:	1cc4      	adds	r4, r0, #3
 80034a4:	f024 0403 	bic.w	r4, r4, #3
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d0f8      	beq.n	800349e <sbrk_aligned+0x22>
 80034ac:	1a21      	subs	r1, r4, r0
 80034ae:	4628      	mov	r0, r5
 80034b0:	f000 fc9a 	bl	8003de8 <_sbrk_r>
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1f2      	bne.n	800349e <sbrk_aligned+0x22>
 80034b8:	e7ef      	b.n	800349a <sbrk_aligned+0x1e>
 80034ba:	bf00      	nop
 80034bc:	200002c8 	.word	0x200002c8

080034c0 <_malloc_r>:
 80034c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c4:	1ccd      	adds	r5, r1, #3
 80034c6:	f025 0503 	bic.w	r5, r5, #3
 80034ca:	3508      	adds	r5, #8
 80034cc:	2d0c      	cmp	r5, #12
 80034ce:	bf38      	it	cc
 80034d0:	250c      	movcc	r5, #12
 80034d2:	2d00      	cmp	r5, #0
 80034d4:	4606      	mov	r6, r0
 80034d6:	db01      	blt.n	80034dc <_malloc_r+0x1c>
 80034d8:	42a9      	cmp	r1, r5
 80034da:	d904      	bls.n	80034e6 <_malloc_r+0x26>
 80034dc:	230c      	movs	r3, #12
 80034de:	6033      	str	r3, [r6, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035bc <_malloc_r+0xfc>
 80034ea:	f000 f869 	bl	80035c0 <__malloc_lock>
 80034ee:	f8d8 3000 	ldr.w	r3, [r8]
 80034f2:	461c      	mov	r4, r3
 80034f4:	bb44      	cbnz	r4, 8003548 <_malloc_r+0x88>
 80034f6:	4629      	mov	r1, r5
 80034f8:	4630      	mov	r0, r6
 80034fa:	f7ff ffbf 	bl	800347c <sbrk_aligned>
 80034fe:	1c43      	adds	r3, r0, #1
 8003500:	4604      	mov	r4, r0
 8003502:	d158      	bne.n	80035b6 <_malloc_r+0xf6>
 8003504:	f8d8 4000 	ldr.w	r4, [r8]
 8003508:	4627      	mov	r7, r4
 800350a:	2f00      	cmp	r7, #0
 800350c:	d143      	bne.n	8003596 <_malloc_r+0xd6>
 800350e:	2c00      	cmp	r4, #0
 8003510:	d04b      	beq.n	80035aa <_malloc_r+0xea>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	4639      	mov	r1, r7
 8003516:	4630      	mov	r0, r6
 8003518:	eb04 0903 	add.w	r9, r4, r3
 800351c:	f000 fc64 	bl	8003de8 <_sbrk_r>
 8003520:	4581      	cmp	r9, r0
 8003522:	d142      	bne.n	80035aa <_malloc_r+0xea>
 8003524:	6821      	ldr	r1, [r4, #0]
 8003526:	1a6d      	subs	r5, r5, r1
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ffa6 	bl	800347c <sbrk_aligned>
 8003530:	3001      	adds	r0, #1
 8003532:	d03a      	beq.n	80035aa <_malloc_r+0xea>
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	442b      	add	r3, r5
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	f8d8 3000 	ldr.w	r3, [r8]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	bb62      	cbnz	r2, 800359c <_malloc_r+0xdc>
 8003542:	f8c8 7000 	str.w	r7, [r8]
 8003546:	e00f      	b.n	8003568 <_malloc_r+0xa8>
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	1b52      	subs	r2, r2, r5
 800354c:	d420      	bmi.n	8003590 <_malloc_r+0xd0>
 800354e:	2a0b      	cmp	r2, #11
 8003550:	d917      	bls.n	8003582 <_malloc_r+0xc2>
 8003552:	1961      	adds	r1, r4, r5
 8003554:	42a3      	cmp	r3, r4
 8003556:	6025      	str	r5, [r4, #0]
 8003558:	bf18      	it	ne
 800355a:	6059      	strne	r1, [r3, #4]
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	bf08      	it	eq
 8003560:	f8c8 1000 	streq.w	r1, [r8]
 8003564:	5162      	str	r2, [r4, r5]
 8003566:	604b      	str	r3, [r1, #4]
 8003568:	4630      	mov	r0, r6
 800356a:	f000 f82f 	bl	80035cc <__malloc_unlock>
 800356e:	f104 000b 	add.w	r0, r4, #11
 8003572:	1d23      	adds	r3, r4, #4
 8003574:	f020 0007 	bic.w	r0, r0, #7
 8003578:	1ac2      	subs	r2, r0, r3
 800357a:	bf1c      	itt	ne
 800357c:	1a1b      	subne	r3, r3, r0
 800357e:	50a3      	strne	r3, [r4, r2]
 8003580:	e7af      	b.n	80034e2 <_malloc_r+0x22>
 8003582:	6862      	ldr	r2, [r4, #4]
 8003584:	42a3      	cmp	r3, r4
 8003586:	bf0c      	ite	eq
 8003588:	f8c8 2000 	streq.w	r2, [r8]
 800358c:	605a      	strne	r2, [r3, #4]
 800358e:	e7eb      	b.n	8003568 <_malloc_r+0xa8>
 8003590:	4623      	mov	r3, r4
 8003592:	6864      	ldr	r4, [r4, #4]
 8003594:	e7ae      	b.n	80034f4 <_malloc_r+0x34>
 8003596:	463c      	mov	r4, r7
 8003598:	687f      	ldr	r7, [r7, #4]
 800359a:	e7b6      	b.n	800350a <_malloc_r+0x4a>
 800359c:	461a      	mov	r2, r3
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d1fb      	bne.n	800359c <_malloc_r+0xdc>
 80035a4:	2300      	movs	r3, #0
 80035a6:	6053      	str	r3, [r2, #4]
 80035a8:	e7de      	b.n	8003568 <_malloc_r+0xa8>
 80035aa:	230c      	movs	r3, #12
 80035ac:	6033      	str	r3, [r6, #0]
 80035ae:	4630      	mov	r0, r6
 80035b0:	f000 f80c 	bl	80035cc <__malloc_unlock>
 80035b4:	e794      	b.n	80034e0 <_malloc_r+0x20>
 80035b6:	6005      	str	r5, [r0, #0]
 80035b8:	e7d6      	b.n	8003568 <_malloc_r+0xa8>
 80035ba:	bf00      	nop
 80035bc:	200002cc 	.word	0x200002cc

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	@ (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff bf0e 	b.w	80033e2 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	200002c4 	.word	0x200002c4

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	@ (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff bf09 	b.w	80033e4 <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	200002c4 	.word	0x200002c4

080035d8 <__sfputc_r>:
 80035d8:	6893      	ldr	r3, [r2, #8]
 80035da:	3b01      	subs	r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	b410      	push	{r4}
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	da07      	bge.n	80035f4 <__sfputc_r+0x1c>
 80035e4:	6994      	ldr	r4, [r2, #24]
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	db01      	blt.n	80035ee <__sfputc_r+0x16>
 80035ea:	290a      	cmp	r1, #10
 80035ec:	d102      	bne.n	80035f4 <__sfputc_r+0x1c>
 80035ee:	bc10      	pop	{r4}
 80035f0:	f000 bb66 	b.w	8003cc0 <__swbuf_r>
 80035f4:	6813      	ldr	r3, [r2, #0]
 80035f6:	1c58      	adds	r0, r3, #1
 80035f8:	6010      	str	r0, [r2, #0]
 80035fa:	7019      	strb	r1, [r3, #0]
 80035fc:	4608      	mov	r0, r1
 80035fe:	bc10      	pop	{r4}
 8003600:	4770      	bx	lr

08003602 <__sfputs_r>:
 8003602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003604:	4606      	mov	r6, r0
 8003606:	460f      	mov	r7, r1
 8003608:	4614      	mov	r4, r2
 800360a:	18d5      	adds	r5, r2, r3
 800360c:	42ac      	cmp	r4, r5
 800360e:	d101      	bne.n	8003614 <__sfputs_r+0x12>
 8003610:	2000      	movs	r0, #0
 8003612:	e007      	b.n	8003624 <__sfputs_r+0x22>
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	463a      	mov	r2, r7
 800361a:	4630      	mov	r0, r6
 800361c:	f7ff ffdc 	bl	80035d8 <__sfputc_r>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d1f3      	bne.n	800360c <__sfputs_r+0xa>
 8003624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003628 <_vfiprintf_r>:
 8003628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362c:	460d      	mov	r5, r1
 800362e:	b09d      	sub	sp, #116	@ 0x74
 8003630:	4614      	mov	r4, r2
 8003632:	4698      	mov	r8, r3
 8003634:	4606      	mov	r6, r0
 8003636:	b118      	cbz	r0, 8003640 <_vfiprintf_r+0x18>
 8003638:	6a03      	ldr	r3, [r0, #32]
 800363a:	b90b      	cbnz	r3, 8003640 <_vfiprintf_r+0x18>
 800363c:	f7ff fdcc 	bl	80031d8 <__sinit>
 8003640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003642:	07d9      	lsls	r1, r3, #31
 8003644:	d405      	bmi.n	8003652 <_vfiprintf_r+0x2a>
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	059a      	lsls	r2, r3, #22
 800364a:	d402      	bmi.n	8003652 <_vfiprintf_r+0x2a>
 800364c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800364e:	f7ff fec8 	bl	80033e2 <__retarget_lock_acquire_recursive>
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	d501      	bpl.n	800365c <_vfiprintf_r+0x34>
 8003658:	692b      	ldr	r3, [r5, #16]
 800365a:	b99b      	cbnz	r3, 8003684 <_vfiprintf_r+0x5c>
 800365c:	4629      	mov	r1, r5
 800365e:	4630      	mov	r0, r6
 8003660:	f000 fb6c 	bl	8003d3c <__swsetup_r>
 8003664:	b170      	cbz	r0, 8003684 <_vfiprintf_r+0x5c>
 8003666:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003668:	07dc      	lsls	r4, r3, #31
 800366a:	d504      	bpl.n	8003676 <_vfiprintf_r+0x4e>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003670:	b01d      	add	sp, #116	@ 0x74
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	0598      	lsls	r0, r3, #22
 800367a:	d4f7      	bmi.n	800366c <_vfiprintf_r+0x44>
 800367c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800367e:	f7ff feb1 	bl	80033e4 <__retarget_lock_release_recursive>
 8003682:	e7f3      	b.n	800366c <_vfiprintf_r+0x44>
 8003684:	2300      	movs	r3, #0
 8003686:	9309      	str	r3, [sp, #36]	@ 0x24
 8003688:	2320      	movs	r3, #32
 800368a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800368e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003692:	2330      	movs	r3, #48	@ 0x30
 8003694:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003844 <_vfiprintf_r+0x21c>
 8003698:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800369c:	f04f 0901 	mov.w	r9, #1
 80036a0:	4623      	mov	r3, r4
 80036a2:	469a      	mov	sl, r3
 80036a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a8:	b10a      	cbz	r2, 80036ae <_vfiprintf_r+0x86>
 80036aa:	2a25      	cmp	r2, #37	@ 0x25
 80036ac:	d1f9      	bne.n	80036a2 <_vfiprintf_r+0x7a>
 80036ae:	ebba 0b04 	subs.w	fp, sl, r4
 80036b2:	d00b      	beq.n	80036cc <_vfiprintf_r+0xa4>
 80036b4:	465b      	mov	r3, fp
 80036b6:	4622      	mov	r2, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	4630      	mov	r0, r6
 80036bc:	f7ff ffa1 	bl	8003602 <__sfputs_r>
 80036c0:	3001      	adds	r0, #1
 80036c2:	f000 80a7 	beq.w	8003814 <_vfiprintf_r+0x1ec>
 80036c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036c8:	445a      	add	r2, fp
 80036ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80036cc:	f89a 3000 	ldrb.w	r3, [sl]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 809f 	beq.w	8003814 <_vfiprintf_r+0x1ec>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e0:	f10a 0a01 	add.w	sl, sl, #1
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	9307      	str	r3, [sp, #28]
 80036e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80036ee:	4654      	mov	r4, sl
 80036f0:	2205      	movs	r2, #5
 80036f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f6:	4853      	ldr	r0, [pc, #332]	@ (8003844 <_vfiprintf_r+0x21c>)
 80036f8:	f7fc fd42 	bl	8000180 <memchr>
 80036fc:	9a04      	ldr	r2, [sp, #16]
 80036fe:	b9d8      	cbnz	r0, 8003738 <_vfiprintf_r+0x110>
 8003700:	06d1      	lsls	r1, r2, #27
 8003702:	bf44      	itt	mi
 8003704:	2320      	movmi	r3, #32
 8003706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800370a:	0713      	lsls	r3, r2, #28
 800370c:	bf44      	itt	mi
 800370e:	232b      	movmi	r3, #43	@ 0x2b
 8003710:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003714:	f89a 3000 	ldrb.w	r3, [sl]
 8003718:	2b2a      	cmp	r3, #42	@ 0x2a
 800371a:	d015      	beq.n	8003748 <_vfiprintf_r+0x120>
 800371c:	9a07      	ldr	r2, [sp, #28]
 800371e:	4654      	mov	r4, sl
 8003720:	2000      	movs	r0, #0
 8003722:	f04f 0c0a 	mov.w	ip, #10
 8003726:	4621      	mov	r1, r4
 8003728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800372c:	3b30      	subs	r3, #48	@ 0x30
 800372e:	2b09      	cmp	r3, #9
 8003730:	d94b      	bls.n	80037ca <_vfiprintf_r+0x1a2>
 8003732:	b1b0      	cbz	r0, 8003762 <_vfiprintf_r+0x13a>
 8003734:	9207      	str	r2, [sp, #28]
 8003736:	e014      	b.n	8003762 <_vfiprintf_r+0x13a>
 8003738:	eba0 0308 	sub.w	r3, r0, r8
 800373c:	fa09 f303 	lsl.w	r3, r9, r3
 8003740:	4313      	orrs	r3, r2
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	46a2      	mov	sl, r4
 8003746:	e7d2      	b.n	80036ee <_vfiprintf_r+0xc6>
 8003748:	9b03      	ldr	r3, [sp, #12]
 800374a:	1d19      	adds	r1, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9103      	str	r1, [sp, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfbb      	ittet	lt
 8003754:	425b      	neglt	r3, r3
 8003756:	f042 0202 	orrlt.w	r2, r2, #2
 800375a:	9307      	strge	r3, [sp, #28]
 800375c:	9307      	strlt	r3, [sp, #28]
 800375e:	bfb8      	it	lt
 8003760:	9204      	strlt	r2, [sp, #16]
 8003762:	7823      	ldrb	r3, [r4, #0]
 8003764:	2b2e      	cmp	r3, #46	@ 0x2e
 8003766:	d10a      	bne.n	800377e <_vfiprintf_r+0x156>
 8003768:	7863      	ldrb	r3, [r4, #1]
 800376a:	2b2a      	cmp	r3, #42	@ 0x2a
 800376c:	d132      	bne.n	80037d4 <_vfiprintf_r+0x1ac>
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800377a:	3402      	adds	r4, #2
 800377c:	9305      	str	r3, [sp, #20]
 800377e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003848 <_vfiprintf_r+0x220>
 8003782:	7821      	ldrb	r1, [r4, #0]
 8003784:	2203      	movs	r2, #3
 8003786:	4650      	mov	r0, sl
 8003788:	f7fc fcfa 	bl	8000180 <memchr>
 800378c:	b138      	cbz	r0, 800379e <_vfiprintf_r+0x176>
 800378e:	9b04      	ldr	r3, [sp, #16]
 8003790:	eba0 000a 	sub.w	r0, r0, sl
 8003794:	2240      	movs	r2, #64	@ 0x40
 8003796:	4082      	lsls	r2, r0
 8003798:	4313      	orrs	r3, r2
 800379a:	3401      	adds	r4, #1
 800379c:	9304      	str	r3, [sp, #16]
 800379e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a2:	482a      	ldr	r0, [pc, #168]	@ (800384c <_vfiprintf_r+0x224>)
 80037a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037a8:	2206      	movs	r2, #6
 80037aa:	f7fc fce9 	bl	8000180 <memchr>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d03f      	beq.n	8003832 <_vfiprintf_r+0x20a>
 80037b2:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <_vfiprintf_r+0x228>)
 80037b4:	bb1b      	cbnz	r3, 80037fe <_vfiprintf_r+0x1d6>
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	3307      	adds	r3, #7
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	3308      	adds	r3, #8
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c4:	443b      	add	r3, r7
 80037c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80037c8:	e76a      	b.n	80036a0 <_vfiprintf_r+0x78>
 80037ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ce:	460c      	mov	r4, r1
 80037d0:	2001      	movs	r0, #1
 80037d2:	e7a8      	b.n	8003726 <_vfiprintf_r+0xfe>
 80037d4:	2300      	movs	r3, #0
 80037d6:	3401      	adds	r4, #1
 80037d8:	9305      	str	r3, [sp, #20]
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 0c0a 	mov.w	ip, #10
 80037e0:	4620      	mov	r0, r4
 80037e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e6:	3a30      	subs	r2, #48	@ 0x30
 80037e8:	2a09      	cmp	r2, #9
 80037ea:	d903      	bls.n	80037f4 <_vfiprintf_r+0x1cc>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0c6      	beq.n	800377e <_vfiprintf_r+0x156>
 80037f0:	9105      	str	r1, [sp, #20]
 80037f2:	e7c4      	b.n	800377e <_vfiprintf_r+0x156>
 80037f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f8:	4604      	mov	r4, r0
 80037fa:	2301      	movs	r3, #1
 80037fc:	e7f0      	b.n	80037e0 <_vfiprintf_r+0x1b8>
 80037fe:	ab03      	add	r3, sp, #12
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	462a      	mov	r2, r5
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <_vfiprintf_r+0x22c>)
 8003806:	a904      	add	r1, sp, #16
 8003808:	4630      	mov	r0, r6
 800380a:	f3af 8000 	nop.w
 800380e:	4607      	mov	r7, r0
 8003810:	1c78      	adds	r0, r7, #1
 8003812:	d1d6      	bne.n	80037c2 <_vfiprintf_r+0x19a>
 8003814:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003816:	07d9      	lsls	r1, r3, #31
 8003818:	d405      	bmi.n	8003826 <_vfiprintf_r+0x1fe>
 800381a:	89ab      	ldrh	r3, [r5, #12]
 800381c:	059a      	lsls	r2, r3, #22
 800381e:	d402      	bmi.n	8003826 <_vfiprintf_r+0x1fe>
 8003820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003822:	f7ff fddf 	bl	80033e4 <__retarget_lock_release_recursive>
 8003826:	89ab      	ldrh	r3, [r5, #12]
 8003828:	065b      	lsls	r3, r3, #25
 800382a:	f53f af1f 	bmi.w	800366c <_vfiprintf_r+0x44>
 800382e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003830:	e71e      	b.n	8003670 <_vfiprintf_r+0x48>
 8003832:	ab03      	add	r3, sp, #12
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	462a      	mov	r2, r5
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <_vfiprintf_r+0x22c>)
 800383a:	a904      	add	r1, sp, #16
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f879 	bl	8003934 <_printf_i>
 8003842:	e7e4      	b.n	800380e <_vfiprintf_r+0x1e6>
 8003844:	08004038 	.word	0x08004038
 8003848:	0800403e 	.word	0x0800403e
 800384c:	08004042 	.word	0x08004042
 8003850:	00000000 	.word	0x00000000
 8003854:	08003603 	.word	0x08003603

08003858 <_printf_common>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	4616      	mov	r6, r2
 800385e:	4698      	mov	r8, r3
 8003860:	688a      	ldr	r2, [r1, #8]
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003868:	4293      	cmp	r3, r2
 800386a:	bfb8      	it	lt
 800386c:	4613      	movlt	r3, r2
 800386e:	6033      	str	r3, [r6, #0]
 8003870:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003874:	4607      	mov	r7, r0
 8003876:	460c      	mov	r4, r1
 8003878:	b10a      	cbz	r2, 800387e <_printf_common+0x26>
 800387a:	3301      	adds	r3, #1
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	0699      	lsls	r1, r3, #26
 8003882:	bf42      	ittt	mi
 8003884:	6833      	ldrmi	r3, [r6, #0]
 8003886:	3302      	addmi	r3, #2
 8003888:	6033      	strmi	r3, [r6, #0]
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	f015 0506 	ands.w	r5, r5, #6
 8003890:	d106      	bne.n	80038a0 <_printf_common+0x48>
 8003892:	f104 0a19 	add.w	sl, r4, #25
 8003896:	68e3      	ldr	r3, [r4, #12]
 8003898:	6832      	ldr	r2, [r6, #0]
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	42ab      	cmp	r3, r5
 800389e:	dc26      	bgt.n	80038ee <_printf_common+0x96>
 80038a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	3b00      	subs	r3, #0
 80038a8:	bf18      	it	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	0692      	lsls	r2, r2, #26
 80038ae:	d42b      	bmi.n	8003908 <_printf_common+0xb0>
 80038b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038b4:	4641      	mov	r1, r8
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c8      	blx	r9
 80038ba:	3001      	adds	r0, #1
 80038bc:	d01e      	beq.n	80038fc <_printf_common+0xa4>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	6922      	ldr	r2, [r4, #16]
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf02      	ittt	eq
 80038ca:	68e5      	ldreq	r5, [r4, #12]
 80038cc:	6833      	ldreq	r3, [r6, #0]
 80038ce:	1aed      	subeq	r5, r5, r3
 80038d0:	68a3      	ldr	r3, [r4, #8]
 80038d2:	bf0c      	ite	eq
 80038d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d8:	2500      	movne	r5, #0
 80038da:	4293      	cmp	r3, r2
 80038dc:	bfc4      	itt	gt
 80038de:	1a9b      	subgt	r3, r3, r2
 80038e0:	18ed      	addgt	r5, r5, r3
 80038e2:	2600      	movs	r6, #0
 80038e4:	341a      	adds	r4, #26
 80038e6:	42b5      	cmp	r5, r6
 80038e8:	d11a      	bne.n	8003920 <_printf_common+0xc8>
 80038ea:	2000      	movs	r0, #0
 80038ec:	e008      	b.n	8003900 <_printf_common+0xa8>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4652      	mov	r2, sl
 80038f2:	4641      	mov	r1, r8
 80038f4:	4638      	mov	r0, r7
 80038f6:	47c8      	blx	r9
 80038f8:	3001      	adds	r0, #1
 80038fa:	d103      	bne.n	8003904 <_printf_common+0xac>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003904:	3501      	adds	r5, #1
 8003906:	e7c6      	b.n	8003896 <_printf_common+0x3e>
 8003908:	18e1      	adds	r1, r4, r3
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	2030      	movs	r0, #48	@ 0x30
 800390e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003912:	4422      	add	r2, r4
 8003914:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003918:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800391c:	3302      	adds	r3, #2
 800391e:	e7c7      	b.n	80038b0 <_printf_common+0x58>
 8003920:	2301      	movs	r3, #1
 8003922:	4622      	mov	r2, r4
 8003924:	4641      	mov	r1, r8
 8003926:	4638      	mov	r0, r7
 8003928:	47c8      	blx	r9
 800392a:	3001      	adds	r0, #1
 800392c:	d0e6      	beq.n	80038fc <_printf_common+0xa4>
 800392e:	3601      	adds	r6, #1
 8003930:	e7d9      	b.n	80038e6 <_printf_common+0x8e>
	...

08003934 <_printf_i>:
 8003934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	7e0f      	ldrb	r7, [r1, #24]
 800393a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800393c:	2f78      	cmp	r7, #120	@ 0x78
 800393e:	4691      	mov	r9, r2
 8003940:	4680      	mov	r8, r0
 8003942:	460c      	mov	r4, r1
 8003944:	469a      	mov	sl, r3
 8003946:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800394a:	d807      	bhi.n	800395c <_printf_i+0x28>
 800394c:	2f62      	cmp	r7, #98	@ 0x62
 800394e:	d80a      	bhi.n	8003966 <_printf_i+0x32>
 8003950:	2f00      	cmp	r7, #0
 8003952:	f000 80d1 	beq.w	8003af8 <_printf_i+0x1c4>
 8003956:	2f58      	cmp	r7, #88	@ 0x58
 8003958:	f000 80b8 	beq.w	8003acc <_printf_i+0x198>
 800395c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003960:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003964:	e03a      	b.n	80039dc <_printf_i+0xa8>
 8003966:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800396a:	2b15      	cmp	r3, #21
 800396c:	d8f6      	bhi.n	800395c <_printf_i+0x28>
 800396e:	a101      	add	r1, pc, #4	@ (adr r1, 8003974 <_printf_i+0x40>)
 8003970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039e1 	.word	0x080039e1
 800397c:	0800395d 	.word	0x0800395d
 8003980:	0800395d 	.word	0x0800395d
 8003984:	0800395d 	.word	0x0800395d
 8003988:	0800395d 	.word	0x0800395d
 800398c:	080039e1 	.word	0x080039e1
 8003990:	0800395d 	.word	0x0800395d
 8003994:	0800395d 	.word	0x0800395d
 8003998:	0800395d 	.word	0x0800395d
 800399c:	0800395d 	.word	0x0800395d
 80039a0:	08003adf 	.word	0x08003adf
 80039a4:	08003a0b 	.word	0x08003a0b
 80039a8:	08003a99 	.word	0x08003a99
 80039ac:	0800395d 	.word	0x0800395d
 80039b0:	0800395d 	.word	0x0800395d
 80039b4:	08003b01 	.word	0x08003b01
 80039b8:	0800395d 	.word	0x0800395d
 80039bc:	08003a0b 	.word	0x08003a0b
 80039c0:	0800395d 	.word	0x0800395d
 80039c4:	0800395d 	.word	0x0800395d
 80039c8:	08003aa1 	.word	0x08003aa1
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6032      	str	r2, [r6, #0]
 80039d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039dc:	2301      	movs	r3, #1
 80039de:	e09c      	b.n	8003b1a <_printf_i+0x1e6>
 80039e0:	6833      	ldr	r3, [r6, #0]
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	1d19      	adds	r1, r3, #4
 80039e6:	6031      	str	r1, [r6, #0]
 80039e8:	0606      	lsls	r6, r0, #24
 80039ea:	d501      	bpl.n	80039f0 <_printf_i+0xbc>
 80039ec:	681d      	ldr	r5, [r3, #0]
 80039ee:	e003      	b.n	80039f8 <_printf_i+0xc4>
 80039f0:	0645      	lsls	r5, r0, #25
 80039f2:	d5fb      	bpl.n	80039ec <_printf_i+0xb8>
 80039f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039f8:	2d00      	cmp	r5, #0
 80039fa:	da03      	bge.n	8003a04 <_printf_i+0xd0>
 80039fc:	232d      	movs	r3, #45	@ 0x2d
 80039fe:	426d      	negs	r5, r5
 8003a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a04:	4858      	ldr	r0, [pc, #352]	@ (8003b68 <_printf_i+0x234>)
 8003a06:	230a      	movs	r3, #10
 8003a08:	e011      	b.n	8003a2e <_printf_i+0xfa>
 8003a0a:	6821      	ldr	r1, [r4, #0]
 8003a0c:	6833      	ldr	r3, [r6, #0]
 8003a0e:	0608      	lsls	r0, r1, #24
 8003a10:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a14:	d402      	bmi.n	8003a1c <_printf_i+0xe8>
 8003a16:	0649      	lsls	r1, r1, #25
 8003a18:	bf48      	it	mi
 8003a1a:	b2ad      	uxthmi	r5, r5
 8003a1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a1e:	4852      	ldr	r0, [pc, #328]	@ (8003b68 <_printf_i+0x234>)
 8003a20:	6033      	str	r3, [r6, #0]
 8003a22:	bf14      	ite	ne
 8003a24:	230a      	movne	r3, #10
 8003a26:	2308      	moveq	r3, #8
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a2e:	6866      	ldr	r6, [r4, #4]
 8003a30:	60a6      	str	r6, [r4, #8]
 8003a32:	2e00      	cmp	r6, #0
 8003a34:	db05      	blt.n	8003a42 <_printf_i+0x10e>
 8003a36:	6821      	ldr	r1, [r4, #0]
 8003a38:	432e      	orrs	r6, r5
 8003a3a:	f021 0104 	bic.w	r1, r1, #4
 8003a3e:	6021      	str	r1, [r4, #0]
 8003a40:	d04b      	beq.n	8003ada <_printf_i+0x1a6>
 8003a42:	4616      	mov	r6, r2
 8003a44:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a48:	fb03 5711 	mls	r7, r3, r1, r5
 8003a4c:	5dc7      	ldrb	r7, [r0, r7]
 8003a4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a52:	462f      	mov	r7, r5
 8003a54:	42bb      	cmp	r3, r7
 8003a56:	460d      	mov	r5, r1
 8003a58:	d9f4      	bls.n	8003a44 <_printf_i+0x110>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d10b      	bne.n	8003a76 <_printf_i+0x142>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	07df      	lsls	r7, r3, #31
 8003a62:	d508      	bpl.n	8003a76 <_printf_i+0x142>
 8003a64:	6923      	ldr	r3, [r4, #16]
 8003a66:	6861      	ldr	r1, [r4, #4]
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	bfde      	ittt	le
 8003a6c:	2330      	movle	r3, #48	@ 0x30
 8003a6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003a76:	1b92      	subs	r2, r2, r6
 8003a78:	6122      	str	r2, [r4, #16]
 8003a7a:	f8cd a000 	str.w	sl, [sp]
 8003a7e:	464b      	mov	r3, r9
 8003a80:	aa03      	add	r2, sp, #12
 8003a82:	4621      	mov	r1, r4
 8003a84:	4640      	mov	r0, r8
 8003a86:	f7ff fee7 	bl	8003858 <_printf_common>
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d14a      	bne.n	8003b24 <_printf_i+0x1f0>
 8003a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a92:	b004      	add	sp, #16
 8003a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f043 0320 	orr.w	r3, r3, #32
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	4832      	ldr	r0, [pc, #200]	@ (8003b6c <_printf_i+0x238>)
 8003aa2:	2778      	movs	r7, #120	@ 0x78
 8003aa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	6831      	ldr	r1, [r6, #0]
 8003aac:	061f      	lsls	r7, r3, #24
 8003aae:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ab2:	d402      	bmi.n	8003aba <_printf_i+0x186>
 8003ab4:	065f      	lsls	r7, r3, #25
 8003ab6:	bf48      	it	mi
 8003ab8:	b2ad      	uxthmi	r5, r5
 8003aba:	6031      	str	r1, [r6, #0]
 8003abc:	07d9      	lsls	r1, r3, #31
 8003abe:	bf44      	itt	mi
 8003ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac4:	6023      	strmi	r3, [r4, #0]
 8003ac6:	b11d      	cbz	r5, 8003ad0 <_printf_i+0x19c>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	e7ad      	b.n	8003a28 <_printf_i+0xf4>
 8003acc:	4826      	ldr	r0, [pc, #152]	@ (8003b68 <_printf_i+0x234>)
 8003ace:	e7e9      	b.n	8003aa4 <_printf_i+0x170>
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	f023 0320 	bic.w	r3, r3, #32
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	e7f6      	b.n	8003ac8 <_printf_i+0x194>
 8003ada:	4616      	mov	r6, r2
 8003adc:	e7bd      	b.n	8003a5a <_printf_i+0x126>
 8003ade:	6833      	ldr	r3, [r6, #0]
 8003ae0:	6825      	ldr	r5, [r4, #0]
 8003ae2:	6961      	ldr	r1, [r4, #20]
 8003ae4:	1d18      	adds	r0, r3, #4
 8003ae6:	6030      	str	r0, [r6, #0]
 8003ae8:	062e      	lsls	r6, r5, #24
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	d501      	bpl.n	8003af2 <_printf_i+0x1be>
 8003aee:	6019      	str	r1, [r3, #0]
 8003af0:	e002      	b.n	8003af8 <_printf_i+0x1c4>
 8003af2:	0668      	lsls	r0, r5, #25
 8003af4:	d5fb      	bpl.n	8003aee <_printf_i+0x1ba>
 8003af6:	8019      	strh	r1, [r3, #0]
 8003af8:	2300      	movs	r3, #0
 8003afa:	6123      	str	r3, [r4, #16]
 8003afc:	4616      	mov	r6, r2
 8003afe:	e7bc      	b.n	8003a7a <_printf_i+0x146>
 8003b00:	6833      	ldr	r3, [r6, #0]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	6032      	str	r2, [r6, #0]
 8003b06:	681e      	ldr	r6, [r3, #0]
 8003b08:	6862      	ldr	r2, [r4, #4]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7fc fb37 	bl	8000180 <memchr>
 8003b12:	b108      	cbz	r0, 8003b18 <_printf_i+0x1e4>
 8003b14:	1b80      	subs	r0, r0, r6
 8003b16:	6060      	str	r0, [r4, #4]
 8003b18:	6863      	ldr	r3, [r4, #4]
 8003b1a:	6123      	str	r3, [r4, #16]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b22:	e7aa      	b.n	8003a7a <_printf_i+0x146>
 8003b24:	6923      	ldr	r3, [r4, #16]
 8003b26:	4632      	mov	r2, r6
 8003b28:	4649      	mov	r1, r9
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	47d0      	blx	sl
 8003b2e:	3001      	adds	r0, #1
 8003b30:	d0ad      	beq.n	8003a8e <_printf_i+0x15a>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	079b      	lsls	r3, r3, #30
 8003b36:	d413      	bmi.n	8003b60 <_printf_i+0x22c>
 8003b38:	68e0      	ldr	r0, [r4, #12]
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	4298      	cmp	r0, r3
 8003b3e:	bfb8      	it	lt
 8003b40:	4618      	movlt	r0, r3
 8003b42:	e7a6      	b.n	8003a92 <_printf_i+0x15e>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4632      	mov	r2, r6
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	47d0      	blx	sl
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d09d      	beq.n	8003a8e <_printf_i+0x15a>
 8003b52:	3501      	adds	r5, #1
 8003b54:	68e3      	ldr	r3, [r4, #12]
 8003b56:	9903      	ldr	r1, [sp, #12]
 8003b58:	1a5b      	subs	r3, r3, r1
 8003b5a:	42ab      	cmp	r3, r5
 8003b5c:	dcf2      	bgt.n	8003b44 <_printf_i+0x210>
 8003b5e:	e7eb      	b.n	8003b38 <_printf_i+0x204>
 8003b60:	2500      	movs	r5, #0
 8003b62:	f104 0619 	add.w	r6, r4, #25
 8003b66:	e7f5      	b.n	8003b54 <_printf_i+0x220>
 8003b68:	08004049 	.word	0x08004049
 8003b6c:	0800405a 	.word	0x0800405a

08003b70 <__sflush_r>:
 8003b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	0716      	lsls	r6, r2, #28
 8003b78:	4605      	mov	r5, r0
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	d454      	bmi.n	8003c28 <__sflush_r+0xb8>
 8003b7e:	684b      	ldr	r3, [r1, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	dc02      	bgt.n	8003b8a <__sflush_r+0x1a>
 8003b84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	dd48      	ble.n	8003c1c <__sflush_r+0xac>
 8003b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b8c:	2e00      	cmp	r6, #0
 8003b8e:	d045      	beq.n	8003c1c <__sflush_r+0xac>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b96:	682f      	ldr	r7, [r5, #0]
 8003b98:	6a21      	ldr	r1, [r4, #32]
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	d030      	beq.n	8003c00 <__sflush_r+0x90>
 8003b9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	0759      	lsls	r1, r3, #29
 8003ba4:	d505      	bpl.n	8003bb2 <__sflush_r+0x42>
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	1ad2      	subs	r2, r2, r3
 8003baa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bac:	b10b      	cbz	r3, 8003bb2 <__sflush_r+0x42>
 8003bae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bb0:	1ad2      	subs	r2, r2, r3
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bb6:	6a21      	ldr	r1, [r4, #32]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b0      	blx	r6
 8003bbc:	1c43      	adds	r3, r0, #1
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	d106      	bne.n	8003bd0 <__sflush_r+0x60>
 8003bc2:	6829      	ldr	r1, [r5, #0]
 8003bc4:	291d      	cmp	r1, #29
 8003bc6:	d82b      	bhi.n	8003c20 <__sflush_r+0xb0>
 8003bc8:	4a28      	ldr	r2, [pc, #160]	@ (8003c6c <__sflush_r+0xfc>)
 8003bca:	40ca      	lsrs	r2, r1
 8003bcc:	07d6      	lsls	r6, r2, #31
 8003bce:	d527      	bpl.n	8003c20 <__sflush_r+0xb0>
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	6062      	str	r2, [r4, #4]
 8003bd4:	04d9      	lsls	r1, r3, #19
 8003bd6:	6922      	ldr	r2, [r4, #16]
 8003bd8:	6022      	str	r2, [r4, #0]
 8003bda:	d504      	bpl.n	8003be6 <__sflush_r+0x76>
 8003bdc:	1c42      	adds	r2, r0, #1
 8003bde:	d101      	bne.n	8003be4 <__sflush_r+0x74>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b903      	cbnz	r3, 8003be6 <__sflush_r+0x76>
 8003be4:	6560      	str	r0, [r4, #84]	@ 0x54
 8003be6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003be8:	602f      	str	r7, [r5, #0]
 8003bea:	b1b9      	cbz	r1, 8003c1c <__sflush_r+0xac>
 8003bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	d002      	beq.n	8003bfa <__sflush_r+0x8a>
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f7ff fbf7 	bl	80033e8 <_free_r>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bfe:	e00d      	b.n	8003c1c <__sflush_r+0xac>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4628      	mov	r0, r5
 8003c04:	47b0      	blx	r6
 8003c06:	4602      	mov	r2, r0
 8003c08:	1c50      	adds	r0, r2, #1
 8003c0a:	d1c9      	bne.n	8003ba0 <__sflush_r+0x30>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0c6      	beq.n	8003ba0 <__sflush_r+0x30>
 8003c12:	2b1d      	cmp	r3, #29
 8003c14:	d001      	beq.n	8003c1a <__sflush_r+0xaa>
 8003c16:	2b16      	cmp	r3, #22
 8003c18:	d11d      	bne.n	8003c56 <__sflush_r+0xe6>
 8003c1a:	602f      	str	r7, [r5, #0]
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e021      	b.n	8003c64 <__sflush_r+0xf4>
 8003c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	e01a      	b.n	8003c5e <__sflush_r+0xee>
 8003c28:	690f      	ldr	r7, [r1, #16]
 8003c2a:	2f00      	cmp	r7, #0
 8003c2c:	d0f6      	beq.n	8003c1c <__sflush_r+0xac>
 8003c2e:	0793      	lsls	r3, r2, #30
 8003c30:	680e      	ldr	r6, [r1, #0]
 8003c32:	bf08      	it	eq
 8003c34:	694b      	ldreq	r3, [r1, #20]
 8003c36:	600f      	str	r7, [r1, #0]
 8003c38:	bf18      	it	ne
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	1bf6      	subs	r6, r6, r7
 8003c3e:	608b      	str	r3, [r1, #8]
 8003c40:	2e00      	cmp	r6, #0
 8003c42:	ddeb      	ble.n	8003c1c <__sflush_r+0xac>
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003c4a:	4633      	mov	r3, r6
 8003c4c:	463a      	mov	r2, r7
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47e0      	blx	ip
 8003c52:	2800      	cmp	r0, #0
 8003c54:	dc07      	bgt.n	8003c66 <__sflush_r+0xf6>
 8003c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c66:	4407      	add	r7, r0
 8003c68:	1a36      	subs	r6, r6, r0
 8003c6a:	e7e9      	b.n	8003c40 <__sflush_r+0xd0>
 8003c6c:	20400001 	.word	0x20400001

08003c70 <_fflush_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	4605      	mov	r5, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	b913      	cbnz	r3, 8003c80 <_fflush_r+0x10>
 8003c7a:	2500      	movs	r5, #0
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	b118      	cbz	r0, 8003c8a <_fflush_r+0x1a>
 8003c82:	6a03      	ldr	r3, [r0, #32]
 8003c84:	b90b      	cbnz	r3, 8003c8a <_fflush_r+0x1a>
 8003c86:	f7ff faa7 	bl	80031d8 <__sinit>
 8003c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f3      	beq.n	8003c7a <_fflush_r+0xa>
 8003c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c94:	07d0      	lsls	r0, r2, #31
 8003c96:	d404      	bmi.n	8003ca2 <_fflush_r+0x32>
 8003c98:	0599      	lsls	r1, r3, #22
 8003c9a:	d402      	bmi.n	8003ca2 <_fflush_r+0x32>
 8003c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c9e:	f7ff fba0 	bl	80033e2 <__retarget_lock_acquire_recursive>
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f7ff ff63 	bl	8003b70 <__sflush_r>
 8003caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cac:	07da      	lsls	r2, r3, #31
 8003cae:	4605      	mov	r5, r0
 8003cb0:	d4e4      	bmi.n	8003c7c <_fflush_r+0xc>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	059b      	lsls	r3, r3, #22
 8003cb6:	d4e1      	bmi.n	8003c7c <_fflush_r+0xc>
 8003cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cba:	f7ff fb93 	bl	80033e4 <__retarget_lock_release_recursive>
 8003cbe:	e7dd      	b.n	8003c7c <_fflush_r+0xc>

08003cc0 <__swbuf_r>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	460e      	mov	r6, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	b118      	cbz	r0, 8003cd2 <__swbuf_r+0x12>
 8003cca:	6a03      	ldr	r3, [r0, #32]
 8003ccc:	b90b      	cbnz	r3, 8003cd2 <__swbuf_r+0x12>
 8003cce:	f7ff fa83 	bl	80031d8 <__sinit>
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	071a      	lsls	r2, r3, #28
 8003cda:	d501      	bpl.n	8003ce0 <__swbuf_r+0x20>
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	b943      	cbnz	r3, 8003cf2 <__swbuf_r+0x32>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f82a 	bl	8003d3c <__swsetup_r>
 8003ce8:	b118      	cbz	r0, 8003cf2 <__swbuf_r+0x32>
 8003cea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003cee:	4638      	mov	r0, r7
 8003cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	6922      	ldr	r2, [r4, #16]
 8003cf6:	1a98      	subs	r0, r3, r2
 8003cf8:	6963      	ldr	r3, [r4, #20]
 8003cfa:	b2f6      	uxtb	r6, r6
 8003cfc:	4283      	cmp	r3, r0
 8003cfe:	4637      	mov	r7, r6
 8003d00:	dc05      	bgt.n	8003d0e <__swbuf_r+0x4e>
 8003d02:	4621      	mov	r1, r4
 8003d04:	4628      	mov	r0, r5
 8003d06:	f7ff ffb3 	bl	8003c70 <_fflush_r>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1ed      	bne.n	8003cea <__swbuf_r+0x2a>
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	60a3      	str	r3, [r4, #8]
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	6022      	str	r2, [r4, #0]
 8003d1a:	701e      	strb	r6, [r3, #0]
 8003d1c:	6962      	ldr	r2, [r4, #20]
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d004      	beq.n	8003d2e <__swbuf_r+0x6e>
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	07db      	lsls	r3, r3, #31
 8003d28:	d5e1      	bpl.n	8003cee <__swbuf_r+0x2e>
 8003d2a:	2e0a      	cmp	r6, #10
 8003d2c:	d1df      	bne.n	8003cee <__swbuf_r+0x2e>
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f7ff ff9d 	bl	8003c70 <_fflush_r>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d0d9      	beq.n	8003cee <__swbuf_r+0x2e>
 8003d3a:	e7d6      	b.n	8003cea <__swbuf_r+0x2a>

08003d3c <__swsetup_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4b29      	ldr	r3, [pc, #164]	@ (8003de4 <__swsetup_r+0xa8>)
 8003d40:	4605      	mov	r5, r0
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	460c      	mov	r4, r1
 8003d46:	b118      	cbz	r0, 8003d50 <__swsetup_r+0x14>
 8003d48:	6a03      	ldr	r3, [r0, #32]
 8003d4a:	b90b      	cbnz	r3, 8003d50 <__swsetup_r+0x14>
 8003d4c:	f7ff fa44 	bl	80031d8 <__sinit>
 8003d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d54:	0719      	lsls	r1, r3, #28
 8003d56:	d422      	bmi.n	8003d9e <__swsetup_r+0x62>
 8003d58:	06da      	lsls	r2, r3, #27
 8003d5a:	d407      	bmi.n	8003d6c <__swsetup_r+0x30>
 8003d5c:	2209      	movs	r2, #9
 8003d5e:	602a      	str	r2, [r5, #0]
 8003d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d64:	81a3      	strh	r3, [r4, #12]
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d6a:	e033      	b.n	8003dd4 <__swsetup_r+0x98>
 8003d6c:	0758      	lsls	r0, r3, #29
 8003d6e:	d512      	bpl.n	8003d96 <__swsetup_r+0x5a>
 8003d70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d72:	b141      	cbz	r1, 8003d86 <__swsetup_r+0x4a>
 8003d74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	d002      	beq.n	8003d82 <__swsetup_r+0x46>
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff fb33 	bl	80033e8 <_free_r>
 8003d82:	2300      	movs	r3, #0
 8003d84:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6063      	str	r3, [r4, #4]
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	89a3      	ldrh	r3, [r4, #12]
 8003d98:	f043 0308 	orr.w	r3, r3, #8
 8003d9c:	81a3      	strh	r3, [r4, #12]
 8003d9e:	6923      	ldr	r3, [r4, #16]
 8003da0:	b94b      	cbnz	r3, 8003db6 <__swsetup_r+0x7a>
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dac:	d003      	beq.n	8003db6 <__swsetup_r+0x7a>
 8003dae:	4621      	mov	r1, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f84f 	bl	8003e54 <__smakebuf_r>
 8003db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dba:	f013 0201 	ands.w	r2, r3, #1
 8003dbe:	d00a      	beq.n	8003dd6 <__swsetup_r+0x9a>
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60a2      	str	r2, [r4, #8]
 8003dc4:	6962      	ldr	r2, [r4, #20]
 8003dc6:	4252      	negs	r2, r2
 8003dc8:	61a2      	str	r2, [r4, #24]
 8003dca:	6922      	ldr	r2, [r4, #16]
 8003dcc:	b942      	cbnz	r2, 8003de0 <__swsetup_r+0xa4>
 8003dce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dd2:	d1c5      	bne.n	8003d60 <__swsetup_r+0x24>
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	0799      	lsls	r1, r3, #30
 8003dd8:	bf58      	it	pl
 8003dda:	6962      	ldrpl	r2, [r4, #20]
 8003ddc:	60a2      	str	r2, [r4, #8]
 8003dde:	e7f4      	b.n	8003dca <__swsetup_r+0x8e>
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7f7      	b.n	8003dd4 <__swsetup_r+0x98>
 8003de4:	20000050 	.word	0x20000050

08003de8 <_sbrk_r>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	4d06      	ldr	r5, [pc, #24]	@ (8003e04 <_sbrk_r+0x1c>)
 8003dec:	2300      	movs	r3, #0
 8003dee:	4604      	mov	r4, r0
 8003df0:	4608      	mov	r0, r1
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	f7fc fd52 	bl	800089c <_sbrk>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d102      	bne.n	8003e02 <_sbrk_r+0x1a>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	b103      	cbz	r3, 8003e02 <_sbrk_r+0x1a>
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	bd38      	pop	{r3, r4, r5, pc}
 8003e04:	200002c0 	.word	0x200002c0

08003e08 <__swhatbuf_r>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e10:	2900      	cmp	r1, #0
 8003e12:	b096      	sub	sp, #88	@ 0x58
 8003e14:	4615      	mov	r5, r2
 8003e16:	461e      	mov	r6, r3
 8003e18:	da0d      	bge.n	8003e36 <__swhatbuf_r+0x2e>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	bf14      	ite	ne
 8003e26:	2340      	movne	r3, #64	@ 0x40
 8003e28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	6031      	str	r1, [r6, #0]
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	b016      	add	sp, #88	@ 0x58
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	466a      	mov	r2, sp
 8003e38:	f000 f848 	bl	8003ecc <_fstat_r>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	dbec      	blt.n	8003e1a <__swhatbuf_r+0x12>
 8003e40:	9901      	ldr	r1, [sp, #4]
 8003e42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e4a:	4259      	negs	r1, r3
 8003e4c:	4159      	adcs	r1, r3
 8003e4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e52:	e7eb      	b.n	8003e2c <__swhatbuf_r+0x24>

08003e54 <__smakebuf_r>:
 8003e54:	898b      	ldrh	r3, [r1, #12]
 8003e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e58:	079d      	lsls	r5, r3, #30
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	d507      	bpl.n	8003e70 <__smakebuf_r+0x1c>
 8003e60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	6123      	str	r3, [r4, #16]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	6163      	str	r3, [r4, #20]
 8003e6c:	b003      	add	sp, #12
 8003e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e70:	ab01      	add	r3, sp, #4
 8003e72:	466a      	mov	r2, sp
 8003e74:	f7ff ffc8 	bl	8003e08 <__swhatbuf_r>
 8003e78:	9f00      	ldr	r7, [sp, #0]
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f7ff fb1e 	bl	80034c0 <_malloc_r>
 8003e84:	b948      	cbnz	r0, 8003e9a <__smakebuf_r+0x46>
 8003e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e8a:	059a      	lsls	r2, r3, #22
 8003e8c:	d4ee      	bmi.n	8003e6c <__smakebuf_r+0x18>
 8003e8e:	f023 0303 	bic.w	r3, r3, #3
 8003e92:	f043 0302 	orr.w	r3, r3, #2
 8003e96:	81a3      	strh	r3, [r4, #12]
 8003e98:	e7e2      	b.n	8003e60 <__smakebuf_r+0xc>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	6020      	str	r0, [r4, #0]
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	9b01      	ldr	r3, [sp, #4]
 8003ea6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003eaa:	b15b      	cbz	r3, 8003ec4 <__smakebuf_r+0x70>
 8003eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	f000 f81d 	bl	8003ef0 <_isatty_r>
 8003eb6:	b128      	cbz	r0, 8003ec4 <__smakebuf_r+0x70>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	431d      	orrs	r5, r3
 8003ec8:	81a5      	strh	r5, [r4, #12]
 8003eca:	e7cf      	b.n	8003e6c <__smakebuf_r+0x18>

08003ecc <_fstat_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d07      	ldr	r5, [pc, #28]	@ (8003eec <_fstat_r+0x20>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	f7fc fcb9 	bl	8000850 <_fstat>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	d102      	bne.n	8003ee8 <_fstat_r+0x1c>
 8003ee2:	682b      	ldr	r3, [r5, #0]
 8003ee4:	b103      	cbz	r3, 8003ee8 <_fstat_r+0x1c>
 8003ee6:	6023      	str	r3, [r4, #0]
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	200002c0 	.word	0x200002c0

08003ef0 <_isatty_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d06      	ldr	r5, [pc, #24]	@ (8003f0c <_isatty_r+0x1c>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fc fcb7 	bl	800086e <_isatty>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_isatty_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_isatty_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	200002c0 	.word	0x200002c0

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	bf00      	nop
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
