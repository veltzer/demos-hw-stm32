
blink2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b64  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002c9c  08002c9c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d90  08002d90  00004040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d98  08002d98  00004040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d9c  08002d9c  00003d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08002da0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000040  08002de0  00004040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002de0  0000411c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccf9  00000000  00000000  0000406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d83  00000000  00000000  00010d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00012ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a25  00000000  00000000  00013850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2d9  00000000  00000000  00014275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c869  00000000  00000000  0003054e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0a34  00000000  00000000  0003cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed7eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000ed830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f0f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000040 	.word	0x20000040
 8000154:	00000000 	.word	0x00000000
 8000158:	08002c84 	.word	0x08002c84

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000044 	.word	0x20000044
 8000174:	08002c84 	.word	0x08002c84

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d4:	68fb      	ldr	r3, [r7, #12]
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa98 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f838 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f88a 	bl	8000604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 f921 	bl	8000738 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004f6:	2001      	movs	r0, #1
 80004f8:	f000 f91e 	bl	8000738 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004fc:	2002      	movs	r0, #2
 80004fe:	f000 f91b 	bl	8000738 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000502:	2101      	movs	r1, #1
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f951 	bl	80007ac <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800050a:	2101      	movs	r1, #1
 800050c:	2001      	movs	r0, #1
 800050e:	f000 f94d 	bl	80007ac <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000512:	2101      	movs	r1, #1
 8000514:	2002      	movs	r0, #2
 8000516:	f000 f949 	bl	80007ac <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <main+0x78>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000520:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000522:	4b0d      	ldr	r3, [pc, #52]	@ (8000558 <main+0x78>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000528:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <main+0x78>)
 800052a:	2200      	movs	r2, #0
 800052c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <main+0x78>)
 8000530:	2200      	movs	r2, #0
 8000532:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <main+0x78>)
 8000536:	2200      	movs	r2, #0
 8000538:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800053a:	4907      	ldr	r1, [pc, #28]	@ (8000558 <main+0x78>)
 800053c:	2000      	movs	r0, #0
 800053e:	f000 f9c5 	bl	80008cc <BSP_COM_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <main+0x6c>
  {
    Error_Handler();
 8000548:	f000 f863 	bl	8000612 <Error_Handler>
  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800054c:	2001      	movs	r0, #1
 800054e:	f000 fdb1 	bl	80010b4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <main+0x72>
 8000556:	bf00      	nop
 8000558:	2000005c 	.word	0x2000005c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09a      	sub	sp, #104	@ 0x68
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2248      	movs	r2, #72	@ 0x48
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fb5d 	bl	8002c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xa4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800058a:	4a1d      	ldr	r2, [pc, #116]	@ (8000600 <SystemClock_Config+0xa4>)
 800058c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <SystemClock_Config+0xa4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800059e:	2320      	movs	r3, #32
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a2:	2301      	movs	r3, #1
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005aa:	2360      	movs	r3, #96	@ 0x60
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f83e 	bl	8001638 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005c2:	f000 f826 	bl	8000612 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80005c6:	236f      	movs	r3, #111	@ 0x6f
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fba8 	bl	8001d3c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 f80e 	bl	8000612 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3768      	adds	r7, #104	@ 0x68
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	58000400 	.word	0x58000400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000608:	2004      	movs	r0, #4
 800060a:	f7ff ff51 	bl	80004b0 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}

08000612 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000616:	b672      	cpsid	i
}
 8000618:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <Error_Handler+0x8>

0800061e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr

0800062a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <NMI_Handler+0x4>

08000632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <HardFault_Handler+0x4>

0800063a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	bf00      	nop
 8000648:	e7fd      	b.n	8000646 <BusFault_Handler+0x4>

0800064a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064e:	bf00      	nop
 8000650:	e7fd      	b.n	800064e <UsageFault_Handler+0x4>

08000652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067a:	f000 fa27 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	@ (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f7ff ff0c 	bl	80004a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	@ (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	@ (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	@ (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f002 fac3 	bl	8002c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff ff13 	bl	80004e0 <main>

080006ba <LoopForever>:

LoopForever:
    b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80006c8:	08002da0 	.word	0x08002da0
  ldr r2, =_sbss
 80006cc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80006d0:	2000011c 	.word	0x2000011c

080006d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>

080006d6 <LL_AHB2_GRP1_EnableClock>:
{
 80006d6:	b480      	push	{r7}
 80006d8:	b085      	sub	sp, #20
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000706:	b480      	push	{r7}
 8000708:	b085      	sub	sp, #20
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800070e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000714:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4313      	orrs	r3, r2
 800071c:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800071e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000722:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4013      	ands	r3, r2
 8000728:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000752:	2002      	movs	r0, #2
 8000754:	f7ff ffbf 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <BSP_LED_Init+0x6c>)
 800075c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000760:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <BSP_LED_Init+0x70>)
 8000772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 faf9 	bl	8000d74 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4a08      	ldr	r2, [pc, #32]	@ (80007a8 <BSP_LED_Init+0x70>)
 8000786:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <BSP_LED_Init+0x6c>)
 800078e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	f000 fc4d 	bl	8001034 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08002d58 	.word	0x08002d58
 80007a8:	20000004 	.word	0x20000004

080007ac <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	460a      	mov	r2, r1
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	4613      	mov	r3, r2
 80007ba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <BSP_PB_Init+0x2e>
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ff7f 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>
 80007d8:	e00c      	b.n	80007f4 <BSP_PB_Init+0x48>
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d103      	bne.n	80007e8 <BSP_PB_Init+0x3c>
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ff78 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>
 80007e6:	e005      	b.n	80007f4 <BSP_PB_Init+0x48>
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d102      	bne.n	80007f4 <BSP_PB_Init+0x48>
 80007ee:	2004      	movs	r0, #4
 80007f0:	f7ff ff71 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4a29      	ldr	r2, [pc, #164]	@ (800089c <BSP_PB_Init+0xf0>)
 80007f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007fc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10c      	bne.n	8000826 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <BSP_PB_Init+0xf4>)
 8000814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 faa8 	bl	8000d74 <HAL_GPIO_Init>
 8000824:	e035      	b.n	8000892 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a1c      	ldr	r2, [pc, #112]	@ (80008a0 <BSP_PB_Init+0xf4>)
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	f107 020c 	add.w	r2, r7, #12
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fa9a 	bl	8000d74 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <BSP_PB_Init+0xf8>)
 8000846:	441a      	add	r2, r3
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4917      	ldr	r1, [pc, #92]	@ (80008a8 <BSP_PB_Init+0xfc>)
 800084c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000850:	4619      	mov	r1, r3
 8000852:	4610      	mov	r0, r2
 8000854:	f000 fa7a 	bl	8000d4c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	4a11      	ldr	r2, [pc, #68]	@ (80008a4 <BSP_PB_Init+0xf8>)
 800085e:	1898      	adds	r0, r3, r2
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <BSP_PB_Init+0x100>)
 8000864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000868:	461a      	mov	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f000 fa55 	bl	8000d1a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4a0f      	ldr	r2, [pc, #60]	@ (80008b0 <BSP_PB_Init+0x104>)
 8000874:	56d0      	ldrsb	r0, [r2, r3]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a0e      	ldr	r2, [pc, #56]	@ (80008b4 <BSP_PB_Init+0x108>)
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	f000 fa16 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <BSP_PB_Init+0x104>)
 800088a:	56d3      	ldrsb	r3, [r2, r3]
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fa2a 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08002d60 	.word	0x08002d60
 80008a0:	20000010 	.word	0x20000010
 80008a4:	2000006c 	.word	0x2000006c
 80008a8:	08002d6c 	.word	0x08002d6c
 80008ac:	20000020 	.word	0x20000020
 80008b0:	08002d68 	.word	0x08002d68
 80008b4:	2000002c 	.word	0x2000002c

080008b8 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d903      	bls.n	80008ea <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80008e2:	f06f 0301 	mvn.w	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e018      	b.n	800091c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2294      	movs	r2, #148	@ 0x94
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <BSP_COM_Init+0x5c>)
 80008f4:	4413      	add	r3, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f85f 	bl	80009ba <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2294      	movs	r2, #148	@ 0x94
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <BSP_COM_Init+0x5c>)
 8000906:	4413      	add	r3, r2
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f80e 	bl	800092c <MX_LPUART1_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000916:	f06f 0303 	mvn.w	r3, #3
 800091a:	e000      	b.n	800091e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000084 	.word	0x20000084

0800092c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_LPUART1_Init+0x60>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	220c      	movs	r2, #12
 800094a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	895b      	ldrh	r3, [r3, #10]
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	891b      	ldrh	r3, [r3, #8]
 8000962:	461a      	mov	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	899b      	ldrh	r3, [r3, #12]
 800096c:	461a      	mov	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000978:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f001 fccb 	bl	8002316 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000001c 	.word	0x2000001c

08000990 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff8f 	bl	80008b8 <BSP_PB_Callback>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}

0800099e <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff88 	bl	80008b8 <BSP_PB_Callback>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 80009b0:	2002      	movs	r0, #2
 80009b2:	f7ff ff81 	bl	80008b8 <BSP_PB_Callback>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}

080009ba <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b088      	sub	sp, #32
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fe87 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fe84 	bl	80006d6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe99 	bl	8000706 <LL_APB1_GRP2_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80009d4:	2304      	movs	r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80009e4:	2308      	movs	r3, #8
 80009e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f000 f9bf 	bl	8000d74 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80009f6:	2308      	movs	r3, #8
 80009f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80009fe:	2308      	movs	r3, #8
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0c:	f000 f9b2 	bl	8000d74 <HAL_GPIO_Init>
}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 f93a 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a28:	f001 fb6a 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <HAL_Init+0x3c>)
 8000a30:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f810 	bl	8000a58 <HAL_InitTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e001      	b.n	8000a48 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a44:	f7ff fdeb 	bl	800061e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000000 	.word	0x20000000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <HAL_InitTick+0x6c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d024      	beq.n	8000ab6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a6c:	f001 fb48 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8000a70:	4602      	mov	r2, r0
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_InitTick+0x6c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f93c 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d10f      	bne.n	8000ab0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d809      	bhi.n	8000aaa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a96:	2200      	movs	r2, #0
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a9e:	f000 f908 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <HAL_InitTick+0x70>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	e007      	b.n	8000aba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
 8000aae:	e004      	b.n	8000aba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
 8000ab4:	e001      	b.n	8000aba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000003c 	.word	0x2000003c
 8000ac8:	20000038 	.word	0x20000038

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	@ (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	2000003c 	.word	0x2000003c
 8000aec:	20000118 	.word	0x20000118

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	@ (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000118 	.word	0x20000118

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4906      	ldr	r1, [pc, #24]	@ (8000b9c <__NVIC_EnableIRQ+0x34>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f7ff ff90 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff2d 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff44 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff92 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff61 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff37 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa4 	bl	8000c58 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b087      	sub	sp, #28
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	460b      	mov	r3, r1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	605a      	str	r2, [r3, #4]
      break;
 8000d38:	e002      	b.n	8000d40 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8000d3e:	bf00      	nop
  }

  return status;
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	371c      	adds	r7, #28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e003      	b.n	8000d68 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000d66:	2300      	movs	r3, #0
  }
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
	...

08000d74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e140      	b.n	8001006 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8132 	beq.w	8001000 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	6939      	ldr	r1, [r7, #16]
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0203 	and.w	r2, r3, #3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 808c 	beq.w	8001000 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8001024 <HAL_GPIO_Init+0x2b0>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	2207      	movs	r2, #7
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1bc>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a44      	ldr	r2, [pc, #272]	@ (8001028 <HAL_GPIO_Init+0x2b4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1b8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a43      	ldr	r2, [pc, #268]	@ (800102c <HAL_GPIO_Init+0x2b8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1b4>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1be>
 8000f28:	2307      	movs	r3, #7
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1be>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1be>
 8000f30:	2300      	movs	r3, #0
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f42:	4938      	ldr	r1, [pc, #224]	@ (8001024 <HAL_GPIO_Init+0x2b0>)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f50:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f74:	4a2e      	ldr	r2, [pc, #184]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f9e:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000faa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000fca:	4a19      	ldr	r2, [pc, #100]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fd8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	f47f aeb7 	bne.w	8000d84 <HAL_GPIO_Init+0x10>
  }
}
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	58000800 	.word	0x58000800

08001034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001044:	787b      	ldrb	r3, [r7, #1]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800104a:	887a      	ldrh	r2, [r7, #2]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001050:	e002      	b.n	8001058 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
	...

08001064 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <HAL_PWR_EnableBkUpAccess+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a03      	ldr	r2, [pc, #12]	@ (800107c <HAL_PWR_EnableBkUpAccess+0x18>)
 800106e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	58000400 	.word	0x58000400

08001080 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <LL_PWR_EnableBootC2+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <LL_PWR_EnableBootC2+0x18>)
 800108a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	58000400 	.word	0x58000400

0800109c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_PWREx_GetVoltageRange+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	58000400 	.word	0x58000400

080010b4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80010bc:	f7ff ffe0 	bl	8001080 <LL_PWR_EnableBootC2>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010d8:	d101      	bne.n	80010de <LL_PWR_IsEnabledBkUpAccess+0x16>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	58000400 	.word	0x58000400

080010ec <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001116:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001136:	d101      	bne.n	800113c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001190:	d101      	bne.n	8001196 <LL_RCC_HSE_IsReady+0x18>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_RCC_HSE_IsReady+0x1a>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ea:	d101      	bne.n	80011f0 <LL_RCC_HSI_IsReady+0x18>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <LL_RCC_HSI_IsReady+0x1a>
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	061b      	lsls	r3, r3, #24
 8001210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d101      	bne.n	800123a <LL_RCC_LSE_IsReady+0x18>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_RCC_LSE_IsReady+0x1a>
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001250:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_RCC_LSI_IsReady+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_RCC_LSI_IsReady+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6013      	str	r3, [r2, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d101      	bne.n	80012f4 <LL_RCC_MSI_IsReady+0x16>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_RCC_MSI_IsReady+0x18>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d101      	bne.n	8001314 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001340:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f023 0203 	bic.w	r2, r3, #3
 8001386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	608b      	str	r3, [r1, #8]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 030c 	and.w	r3, r3, #12
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001410:	f023 020f 	bic.w	r2, r3, #15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800141c:	4313      	orrs	r3, r2
 800141e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800143e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001496:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800151e:	d101      	bne.n	8001524 <LL_RCC_PLL_IsReady+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_RCC_PLL_IsReady+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0303 	and.w	r3, r3, #3
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800159a:	d101      	bne.n	80015a0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015be:	d101      	bne.n	80015c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e2:	d101      	bne.n	80015e8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001604:	d101      	bne.n	800160a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001626:	d101      	bne.n	800162c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e36f      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	f7ff fea6 	bl	800139a <LL_RCC_GetSysClkSource>
 800164e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001650:	f7ff ff8f 	bl	8001572 <LL_RCC_PLL_GetMainSource>
 8001654:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80c4 	beq.w	80017ec <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x3e>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d176      	bne.n	800175e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d173      	bne.n	800175e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e353      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x68>
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800169e:	e006      	b.n	80016ae <HAL_RCC_OscConfig+0x76>
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d222      	bcs.n	80016f8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd5a 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e331      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fe2b 	bl	800134c <LL_RCC_MSI_SetCalibTrimming>
 80016f6:	e021      	b.n	800173c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe12 	bl	800134c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fd1f 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e2f6      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800173c:	f000 fce0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8001740:	4603      	mov	r3, r0
 8001742:	4aa7      	ldr	r2, [pc, #668]	@ (80019e0 <HAL_RCC_OscConfig+0x3a8>)
 8001744:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001746:	4ba7      	ldr	r3, [pc, #668]	@ (80019e4 <HAL_RCC_OscConfig+0x3ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f984 	bl	8000a58 <HAL_InitTick>
 8001750:	4603      	mov	r3, r0
 8001752:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d047      	beq.n	80017ea <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	e2e5      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d02c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001766:	f7ff fd9e 	bl	80012a6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176a:	f7ff f9c1 	bl	8000af0 <HAL_GetTick>
 800176e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001772:	f7ff f9bd 	bl	8000af0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e2d2      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001784:	f7ff fdab 	bl	80012de <LL_RCC_MSI_IsReady>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f1      	beq.n	8001772 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fdc7 	bl	800134c <LL_RCC_MSI_SetCalibTrimming>
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c0:	f7ff fd7f 	bl	80012c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c4:	f7ff f994 	bl	8000af0 <HAL_GetTick>
 80017c8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017cc:	f7ff f990 	bl	8000af0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e2a5      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80017de:	f7ff fd7e 	bl	80012de <LL_RCC_MSI_IsReady>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f1      	bne.n	80017cc <HAL_RCC_OscConfig+0x194>
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80017ea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d058      	beq.n	80018aa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x1d2>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d108      	bne.n	8001816 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d14b      	bne.n	80018aa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e289      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001834:	d102      	bne.n	800183c <HAL_RCC_OscConfig+0x204>
 8001836:	f7ff fc86 	bl	8001146 <LL_RCC_HSE_Enable>
 800183a:	e00d      	b.n	8001858 <HAL_RCC_OscConfig+0x220>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001844:	d104      	bne.n	8001850 <HAL_RCC_OscConfig+0x218>
 8001846:	f7ff fc51 	bl	80010ec <LL_RCC_HSE_EnableTcxo>
 800184a:	f7ff fc7c 	bl	8001146 <LL_RCC_HSE_Enable>
 800184e:	e003      	b.n	8001858 <HAL_RCC_OscConfig+0x220>
 8001850:	f7ff fc87 	bl	8001162 <LL_RCC_HSE_Disable>
 8001854:	f7ff fc58 	bl	8001108 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d012      	beq.n	8001886 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f946 	bl	8000af0 <HAL_GetTick>
 8001864:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff f942 	bl	8000af0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e257      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800187a:	f7ff fc80 	bl	800117e <LL_RCC_HSE_IsReady>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f1      	beq.n	8001868 <HAL_RCC_OscConfig+0x230>
 8001884:	e011      	b.n	80018aa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff f933 	bl	8000af0 <HAL_GetTick>
 800188a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188e:	f7ff f92f 	bl	8000af0 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	@ 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e244      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80018a0:	f7ff fc6d 	bl	800117e <LL_RCC_HSE_IsReady>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f1      	bne.n	800188e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d046      	beq.n	8001944 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x290>
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d10e      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d10b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e22a      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc8e 	bl	80011fa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018de:	e031      	b.n	8001944 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d019      	beq.n	800191c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	f7ff fc5a 	bl	80011a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f900 	bl	8000af0 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff f8fc 	bl	8000af0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e211      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001906:	f7ff fc67 	bl	80011d8 <LL_RCC_HSI_IsReady>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f1      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fc70 	bl	80011fa <LL_RCC_HSI_SetCalibTrimming>
 800191a:	e013      	b.n	8001944 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191c:	f7ff fc4e 	bl	80011bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f8e6 	bl	8000af0 <HAL_GetTick>
 8001924:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff f8e2 	bl	8000af0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1f7      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800193a:	f7ff fc4d 	bl	80011d8 <LL_RCC_HSI_IsReady>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f1      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d06e      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d056      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001960:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	429a      	cmp	r2, r3
 800196e:	d031      	beq.n	80019d4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e1d0      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d013      	beq.n	80019ba <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001992:	f7ff fc67 	bl	8001264 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001996:	f7ff f8ab 	bl	8000af0 <HAL_GetTick>
 800199a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff f8a7 	bl	8000af0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b11      	cmp	r3, #17
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1bc      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80019b0:	f7ff fc68 	bl	8001284 <LL_RCC_LSI_IsReady>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f1      	bne.n	800199e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c2:	f023 0210 	bic.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ce:	4313      	orrs	r3, r2
 80019d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d4:	f7ff fc36 	bl	8001244 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f88a 	bl	8000af0 <HAL_GetTick>
 80019dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80019de:	e00c      	b.n	80019fa <HAL_RCC_OscConfig+0x3c2>
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000038 	.word	0x20000038
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e8:	f7ff f882 	bl	8000af0 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b11      	cmp	r3, #17
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e197      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80019fa:	f7ff fc43 	bl	8001284 <LL_RCC_LSI_IsReady>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f1      	beq.n	80019e8 <HAL_RCC_OscConfig+0x3b0>
 8001a04:	e013      	b.n	8001a2e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	f7ff fc2d 	bl	8001264 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f871 	bl	8000af0 <HAL_GetTick>
 8001a0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff f86d 	bl	8000af0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b11      	cmp	r3, #17
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e182      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a24:	f7ff fc2e 	bl	8001284 <LL_RCC_LSI_IsReady>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f1      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80d8 	beq.w	8001bec <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a3c:	f7ff fb44 	bl	80010c8 <LL_PWR_IsEnabledBkUpAccess>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d113      	bne.n	8001a6e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a46:	f7ff fb0d 	bl	8001064 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff f851 	bl	8000af0 <HAL_GetTick>
 8001a4e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a52:	f7ff f84d 	bl	8000af0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e162      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a64:	f7ff fb30 	bl	80010c8 <LL_PWR_IsEnabledBkUpAccess>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f1      	beq.n	8001a52 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d07b      	beq.n	8001b6e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b85      	cmp	r3, #133	@ 0x85
 8001a7c:	d003      	beq.n	8001a86 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f829 	bl	8000af0 <HAL_GetTick>
 8001a9e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f81b 	bl	8000af0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e12e      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001acc:	f7ff fba9 	bl	8001222 <LL_RCC_LSE_IsReady>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0ef      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b81      	cmp	r3, #129	@ 0x81
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b85      	cmp	r3, #133	@ 0x85
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f803 	bl	8000af0 <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7fe fff5 	bl	8000af0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e108      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ec      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b28:	e060      	b.n	8001bec <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ffe1 	bl	8000af0 <HAL_GetTick>
 8001b2e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b44:	e00a      	b.n	8001b5c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7fe ffd3 	bl	8000af0 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0e6      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ec      	bne.n	8001b46 <HAL_RCC_OscConfig+0x50e>
 8001b6c:	e03e      	b.n	8001bec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7fe ffbf 	bl	8000af0 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7fe ffb1 	bl	8000af0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0c4      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ec      	bne.n	8001b8a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7fe ff9e 	bl	8000af0 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ff90 	bl	8000af0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0a3      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001be2:	f7ff fb1e 	bl	8001222 <LL_RCC_LSE_IsReady>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ef      	bne.n	8001bcc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8099 	beq.w	8001d28 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d06c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d14b      	bne.n	8001c9c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	f7ff fc74 	bl	80014f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7fe ff72 	bl	8000af0 <HAL_GetTick>
 8001c0c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7fe ff6e 	bl	8000af0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b0a      	cmp	r3, #10
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e083      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c22:	f7ff fc73 	bl	800150c <LL_RCC_PLL_IsReady>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f1      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <HAL_RCC_OscConfig+0x6fc>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c44:	0212      	lsls	r2, r2, #8
 8001c46:	4311      	orrs	r1, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c4c:	4311      	orrs	r1, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c62:	f7ff fc37 	bl	80014d4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff3b 	bl	8000af0 <HAL_GetTick>
 8001c7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe ff37 	bl	8000af0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b0a      	cmp	r3, #10
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e04c      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c90:	f7ff fc3c 	bl	800150c <LL_RCC_PLL_IsReady>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f1      	beq.n	8001c7e <HAL_RCC_OscConfig+0x646>
 8001c9a:	e045      	b.n	8001d28 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	f7ff fc28 	bl	80014f0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ff26 	bl	8000af0 <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe ff22 	bl	8000af0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e037      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cba:	f7ff fc27 	bl	800150c <LL_RCC_PLL_IsReady>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f1      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_RCC_OscConfig+0x700>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
 8001cd4:	e028      	b.n	8001d28 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e023      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d115      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d10e      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	11c1808c 	.word	0x11c1808c
 8001d38:	eefefffc 	.word	0xeefefffc

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e12c      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b98      	ldr	r3, [pc, #608]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d91b      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b95      	ldr	r3, [pc, #596]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4993      	ldr	r1, [pc, #588]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe febf 	bl	8000af0 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d76:	f7fe febb 	bl	8000af0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e110      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d88:	4b8a      	ldr	r3, [pc, #552]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d1ef      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fb02 	bl	80013b0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dac:	f7fe fea0 	bl	8000af0 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001db4:	f7fe fe9c 	bl	8000af0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0f1      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001dc6:	f7ff fbdf 	bl	8001588 <LL_RCC_IsActiveFlag_HPRE>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f1      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d016      	beq.n	8001e0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff faf8 	bl	80013d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001de6:	f7fe fe83 	bl	8000af0 <HAL_GetTick>
 8001dea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dee:	f7fe fe7f 	bl	8000af0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0d4      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e00:	f7ff fbd3 	bl	80015aa <LL_RCC_IsActiveFlag_C2HPRE>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f1      	beq.n	8001dee <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff faf0 	bl	8001400 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fe66 	bl	8000af0 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e28:	f7fe fe62 	bl	8000af0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0b7      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e3a:	f7ff fbc8 	bl	80015ce <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f1      	beq.n	8001e28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fae9 	bl	800142c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e5a:	f7fe fe49 	bl	8000af0 <HAL_GetTick>
 8001e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e62:	f7fe fe45 	bl	8000af0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e09a      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e74:	f7ff fbbd 	bl	80015f2 <LL_RCC_IsActiveFlag_PPRE1>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f1      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d017      	beq.n	8001eba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fade 	bl	8001452 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e96:	f7fe fe2b 	bl	8000af0 <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e9e:	f7fe fe27 	bl	8000af0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e07c      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001eb0:	f7ff fbb0 	bl	8001614 <LL_RCC_IsActiveFlag_PPRE2>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f1      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d043      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001ece:	f7ff f956 	bl	800117e <LL_RCC_HSE_IsReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d11e      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e066      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ee4:	f7ff fb12 	bl	800150c <LL_RCC_PLL_IsReady>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d113      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e05b      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001efa:	f7ff f9f0 	bl	80012de <LL_RCC_MSI_IsReady>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d108      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e050      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f08:	f7ff f966 	bl	80011d8 <LL_RCC_HSI_IsReady>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e049      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fa2a 	bl	8001374 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7fe fde6 	bl	8000af0 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7fe fde2 	bl	8000af0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e035      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	f7ff fa2c 	bl	800139a <LL_RCC_GetSysClkSource>
 8001f42:	4602      	mov	r2, r0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d1ec      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d21b      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 0207 	bic.w	r2, r3, #7
 8001f64:	4913      	ldr	r1, [pc, #76]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fdc0 	bl	8000af0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f74:	f7fe fdbc 	bl	8000af0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e011      	b.n	8001faa <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_ClockConfig+0x278>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1ef      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f94:	f000 f8b4 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_RCC_ClockConfig+0x27c>)
 8001f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_RCC_ClockConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fd58 	bl	8000a58 <HAL_InitTick>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58004000 	.word	0x58004000
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000038 	.word	0x20000038

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	f7ff f9e4 	bl	800139a <LL_RCC_GetSysClkSource>
 8001fd2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	f7ff facd 	bl	8001572 <LL_RCC_PLL_GetMainSource>
 8001fd8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x2c>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d139      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d136      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001fec:	f7ff f987 	bl	80012fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x62>
 8001ff6:	f7ff f982 	bl	80012fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x4e>
 8002000:	f7ff f98d 	bl	800131e <LL_RCC_MSI_GetRange>
 8002004:	4603      	mov	r3, r0
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	e005      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x5a>
 800200e:	f7ff f991 	bl	8001334 <LL_RCC_MSI_GetRangeAfterStandby>
 8002012:	4603      	mov	r3, r0
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	4a36      	ldr	r2, [pc, #216]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x134>)
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	e014      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x8c>
 8002022:	f7ff f96c 	bl	80012fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x7a>
 800202c:	f7ff f977 	bl	800131e <LL_RCC_MSI_GetRange>
 8002030:	4603      	mov	r3, r0
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	e005      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x86>
 800203a:	f7ff f97b 	bl	8001334 <LL_RCC_MSI_GetRangeAfterStandby>
 800203e:	4603      	mov	r3, r0
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	4a2b      	ldr	r2, [pc, #172]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d115      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002058:	e012      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b04      	cmp	r3, #4
 800205e:	d102      	bne.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002060:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00c      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d109      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800206c:	f7ff f85a 	bl	8001124 <LL_RCC_HSE_IsEnabledDiv2>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002076:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e001      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800207e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	f7ff f98b 	bl	800139a <LL_RCC_GetSysClkSource>
 8002084:	4603      	mov	r3, r0
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d12f      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800208a:	f7ff fa72 	bl	8001572 <LL_RCC_PLL_GetMainSource>
 800208e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xde>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800209c:	e00d      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a0:	60fb      	str	r3, [r7, #12]
        break;
 80020a2:	e00d      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020a4:	f7ff f83e 	bl	8001124 <LL_RCC_HSE_IsEnabledDiv2>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020ae:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x138>)
 80020b0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x13c>)
 80020b6:	60fb      	str	r3, [r7, #12]
        break;
 80020b8:	e002      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	60fb      	str	r3, [r7, #12]
        break;
 80020be:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80020c0:	f7ff fa35 	bl	800152e <LL_RCC_PLL_GetN>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	fb03 f402 	mul.w	r4, r3, r2
 80020cc:	f7ff fa46 	bl	800155c <LL_RCC_PLL_GetDivider>
 80020d0:	4603      	mov	r3, r0
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	3301      	adds	r3, #1
 80020d6:	fbb4 f4f3 	udiv	r4, r4, r3
 80020da:	f7ff fa34 	bl	8001546 <LL_RCC_PLL_GetR>
 80020de:	4603      	mov	r3, r0
 80020e0:	0f5b      	lsrs	r3, r3, #29
 80020e2:	3301      	adds	r3, #1
 80020e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80020e8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80020ea:	697b      	ldr	r3, [r7, #20]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd90      	pop	{r4, r7, pc}
 80020f4:	08002d18 	.word	0x08002d18
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	01e84800 	.word	0x01e84800

08002100 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b598      	push	{r3, r4, r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002104:	f7ff ff5c 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8002108:	4604      	mov	r4, r0
 800210a:	f7ff f9b5 	bl	8001478 <LL_RCC_GetAHBPrescaler>
 800210e:	4603      	mov	r3, r0
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a03      	ldr	r2, [pc, #12]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x24>)
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd98      	pop	{r3, r4, r7, pc}
 8002124:	08002cb8 	.word	0x08002cb8

08002128 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b598      	push	{r3, r4, r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800212c:	f7ff ffe8 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002130:	4604      	mov	r4, r0
 8002132:	f7ff f9b9 	bl	80014a8 <LL_RCC_GetAPB1Prescaler>
 8002136:	4603      	mov	r3, r0
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd98      	pop	{r3, r4, r7, pc}
 8002148:	08002cf8 	.word	0x08002cf8

0800214c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b598      	push	{r3, r4, r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002150:	f7ff ffd6 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002154:	4604      	mov	r4, r0
 8002156:	f7ff f9b2 	bl	80014be <LL_RCC_GetAPB2Prescaler>
 800215a:	4603      	mov	r3, r0
 800215c:	0adb      	lsrs	r3, r3, #11
 800215e:	4a03      	ldr	r2, [pc, #12]	@ (800216c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd98      	pop	{r3, r4, r7, pc}
 800216c:	08002cf8 	.word	0x08002cf8

08002170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	4a10      	ldr	r2, [pc, #64]	@ (80021c4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002188:	f7ff f981 	bl	800148e <LL_RCC_GetAHB3Prescaler>
 800218c:	4603      	mov	r3, r0
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	4a0c      	ldr	r2, [pc, #48]	@ (80021c8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9c      	lsrs	r4, r3, #18
 80021ac:	f7fe ff76 	bl	800109c <HAL_PWREx_GetVoltageRange>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4620      	mov	r0, r4
 80021b6:	f000 f80b 	bl	80021d0 <RCC_SetFlashLatency>
 80021ba:	4603      	mov	r3, r0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd90      	pop	{r4, r7, pc}
 80021c4:	08002d18 	.word	0x08002d18
 80021c8:	08002cb8 	.word	0x08002cb8
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	@ 0x38
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80021da:	4a3a      	ldr	r2, [pc, #232]	@ (80022c4 <RCC_SetFlashLatency+0xf4>)
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e4:	6018      	str	r0, [r3, #0]
 80021e6:	3304      	adds	r3, #4
 80021e8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80021ea:	4a37      	ldr	r2, [pc, #220]	@ (80022c8 <RCC_SetFlashLatency+0xf8>)
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f4:	6018      	str	r0, [r3, #0]
 80021f6:	3304      	adds	r3, #4
 80021f8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80021fa:	4a34      	ldr	r2, [pc, #208]	@ (80022cc <RCC_SetFlashLatency+0xfc>)
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	ca07      	ldmia	r2, {r0, r1, r2}
 8002202:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002206:	2300      	movs	r3, #0
 8002208:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002210:	d11b      	bne.n	800224a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002212:	2300      	movs	r3, #0
 8002214:	633b      	str	r3, [r7, #48]	@ 0x30
 8002216:	e014      	b.n	8002242 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	3338      	adds	r3, #56	@ 0x38
 800221e:	443b      	add	r3, r7
 8002220:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4293      	cmp	r3, r2
 800222a:	d807      	bhi.n	800223c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800222c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	3338      	adds	r3, #56	@ 0x38
 8002232:	443b      	add	r3, r7
 8002234:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002238:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800223a:	e021      	b.n	8002280 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223e:	3301      	adds	r3, #1
 8002240:	633b      	str	r3, [r7, #48]	@ 0x30
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	2b02      	cmp	r3, #2
 8002246:	d9e7      	bls.n	8002218 <RCC_SetFlashLatency+0x48>
 8002248:	e01a      	b.n	8002280 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224e:	e014      	b.n	800227a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	3338      	adds	r3, #56	@ 0x38
 8002256:	443b      	add	r3, r7
 8002258:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4293      	cmp	r3, r2
 8002262:	d807      	bhi.n	8002274 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3338      	adds	r3, #56	@ 0x38
 800226a:	443b      	add	r3, r7
 800226c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002272:	e005      	b.n	8002280 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002276:	3301      	adds	r3, #1
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800227a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227c:	2b02      	cmp	r3, #2
 800227e:	d9e7      	bls.n	8002250 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <RCC_SetFlashLatency+0x100>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	4911      	ldr	r1, [pc, #68]	@ (80022d0 <RCC_SetFlashLatency+0x100>)
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002290:	f7fe fc2e 	bl	8000af0 <HAL_GetTick>
 8002294:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002296:	e008      	b.n	80022aa <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002298:	f7fe fc2a 	bl	8000af0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e007      	b.n	80022ba <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <RCC_SetFlashLatency+0x100>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1ef      	bne.n	8002298 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3738      	adds	r7, #56	@ 0x38
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08002c9c 	.word	0x08002c9c
 80022c8:	08002ca4 	.word	0x08002ca4
 80022cc:	08002cac 	.word	0x08002cac
 80022d0:	58004000 	.word	0x58004000

080022d4 <LL_RCC_GetUSARTClockSource>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	4313      	orrs	r3, r2
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_RCC_GetLPUARTClockSource>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4013      	ands	r3, r2
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e042      	b.n	80023ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f83b 	bl	80023b6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	@ 0x24
 8002344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 faa5 	bl	80028b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f82e 	bl	80023c8 <UART_SetConfig>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e01b      	b.n	80023ae <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002384:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002394:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fb23 	bl	80029f2 <UART_CheckIdleState>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b08c      	sub	sp, #48	@ 0x30
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b94      	ldr	r3, [pc, #592]	@ (8002648 <UART_SetConfig+0x280>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002400:	430b      	orrs	r3, r1
 8002402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a89      	ldr	r2, [pc, #548]	@ (800264c <UART_SetConfig+0x284>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002430:	4313      	orrs	r3, r2
 8002432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800243e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002448:	430b      	orrs	r3, r1
 800244a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	f023 010f 	bic.w	r1, r3, #15
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	@ (8002650 <UART_SetConfig+0x288>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d127      	bne.n	80024bc <UART_SetConfig+0xf4>
 800246c:	2003      	movs	r0, #3
 800246e:	f7ff ff31 	bl	80022d4 <LL_RCC_GetUSARTClockSource>
 8002472:	4603      	mov	r3, r0
 8002474:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002478:	2b03      	cmp	r3, #3
 800247a:	d81b      	bhi.n	80024b4 <UART_SetConfig+0xec>
 800247c:	a201      	add	r2, pc, #4	@ (adr r2, 8002484 <UART_SetConfig+0xbc>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a5 	.word	0x080024a5
 800248c:	0800249d 	.word	0x0800249d
 8002490:	080024ad 	.word	0x080024ad
 8002494:	2301      	movs	r3, #1
 8002496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800249a:	e080      	b.n	800259e <UART_SetConfig+0x1d6>
 800249c:	2302      	movs	r3, #2
 800249e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024a2:	e07c      	b.n	800259e <UART_SetConfig+0x1d6>
 80024a4:	2304      	movs	r3, #4
 80024a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024aa:	e078      	b.n	800259e <UART_SetConfig+0x1d6>
 80024ac:	2308      	movs	r3, #8
 80024ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b2:	e074      	b.n	800259e <UART_SetConfig+0x1d6>
 80024b4:	2310      	movs	r3, #16
 80024b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024ba:	e070      	b.n	800259e <UART_SetConfig+0x1d6>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a64      	ldr	r2, [pc, #400]	@ (8002654 <UART_SetConfig+0x28c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d138      	bne.n	8002538 <UART_SetConfig+0x170>
 80024c6:	200c      	movs	r0, #12
 80024c8:	f7ff ff04 	bl	80022d4 <LL_RCC_GetUSARTClockSource>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d82c      	bhi.n	8002530 <UART_SetConfig+0x168>
 80024d6:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <UART_SetConfig+0x114>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002511 	.word	0x08002511
 80024e0:	08002531 	.word	0x08002531
 80024e4:	08002531 	.word	0x08002531
 80024e8:	08002531 	.word	0x08002531
 80024ec:	08002521 	.word	0x08002521
 80024f0:	08002531 	.word	0x08002531
 80024f4:	08002531 	.word	0x08002531
 80024f8:	08002531 	.word	0x08002531
 80024fc:	08002519 	.word	0x08002519
 8002500:	08002531 	.word	0x08002531
 8002504:	08002531 	.word	0x08002531
 8002508:	08002531 	.word	0x08002531
 800250c:	08002529 	.word	0x08002529
 8002510:	2300      	movs	r3, #0
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002516:	e042      	b.n	800259e <UART_SetConfig+0x1d6>
 8002518:	2302      	movs	r3, #2
 800251a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800251e:	e03e      	b.n	800259e <UART_SetConfig+0x1d6>
 8002520:	2304      	movs	r3, #4
 8002522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002526:	e03a      	b.n	800259e <UART_SetConfig+0x1d6>
 8002528:	2308      	movs	r3, #8
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800252e:	e036      	b.n	800259e <UART_SetConfig+0x1d6>
 8002530:	2310      	movs	r3, #16
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002536:	e032      	b.n	800259e <UART_SetConfig+0x1d6>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a43      	ldr	r2, [pc, #268]	@ (800264c <UART_SetConfig+0x284>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12a      	bne.n	8002598 <UART_SetConfig+0x1d0>
 8002542:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002546:	f7ff fed7 	bl	80022f8 <LL_RCC_GetLPUARTClockSource>
 800254a:	4603      	mov	r3, r0
 800254c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002550:	d01a      	beq.n	8002588 <UART_SetConfig+0x1c0>
 8002552:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002556:	d81b      	bhi.n	8002590 <UART_SetConfig+0x1c8>
 8002558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800255c:	d00c      	beq.n	8002578 <UART_SetConfig+0x1b0>
 800255e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002562:	d815      	bhi.n	8002590 <UART_SetConfig+0x1c8>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <UART_SetConfig+0x1a8>
 8002568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800256c:	d008      	beq.n	8002580 <UART_SetConfig+0x1b8>
 800256e:	e00f      	b.n	8002590 <UART_SetConfig+0x1c8>
 8002570:	2300      	movs	r3, #0
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002576:	e012      	b.n	800259e <UART_SetConfig+0x1d6>
 8002578:	2302      	movs	r3, #2
 800257a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800257e:	e00e      	b.n	800259e <UART_SetConfig+0x1d6>
 8002580:	2304      	movs	r3, #4
 8002582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002586:	e00a      	b.n	800259e <UART_SetConfig+0x1d6>
 8002588:	2308      	movs	r3, #8
 800258a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800258e:	e006      	b.n	800259e <UART_SetConfig+0x1d6>
 8002590:	2310      	movs	r3, #16
 8002592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002596:	e002      	b.n	800259e <UART_SetConfig+0x1d6>
 8002598:	2310      	movs	r3, #16
 800259a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2a      	ldr	r2, [pc, #168]	@ (800264c <UART_SetConfig+0x284>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	f040 80a4 	bne.w	80026f2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d823      	bhi.n	80025fa <UART_SetConfig+0x232>
 80025b2:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <UART_SetConfig+0x1f0>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025dd 	.word	0x080025dd
 80025bc:	080025fb 	.word	0x080025fb
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080025fb 	.word	0x080025fb
 80025c8:	080025eb 	.word	0x080025eb
 80025cc:	080025fb 	.word	0x080025fb
 80025d0:	080025fb 	.word	0x080025fb
 80025d4:	080025fb 	.word	0x080025fb
 80025d8:	080025f3 	.word	0x080025f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fda4 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80025e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025e2:	e010      	b.n	8002606 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <UART_SetConfig+0x290>)
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025e8:	e00d      	b.n	8002606 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ea:	f7ff fce9 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80025ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025f0:	e009      	b.n	8002606 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025f8:	e005      	b.n	8002606 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002604:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8137 	beq.w	800287c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <UART_SetConfig+0x294>)
 8002614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002618:	461a      	mov	r2, r3
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002620:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	429a      	cmp	r2, r3
 8002630:	d305      	bcc.n	800263e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002644:	e11a      	b.n	800287c <UART_SetConfig+0x4b4>
 8002646:	bf00      	nop
 8002648:	cfff69f3 	.word	0xcfff69f3
 800264c:	40008000 	.word	0x40008000
 8002650:	40013800 	.word	0x40013800
 8002654:	40004400 	.word	0x40004400
 8002658:	00f42400 	.word	0x00f42400
 800265c:	08002d78 	.word	0x08002d78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	2200      	movs	r2, #0
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	60fa      	str	r2, [r7, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	4a8e      	ldr	r2, [pc, #568]	@ (80028a8 <UART_SetConfig+0x4e0>)
 800266e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002672:	b29b      	uxth	r3, r3
 8002674:	2200      	movs	r2, #0
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800267e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002682:	f7fd fd79 	bl	8000178 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	020b      	lsls	r3, r1, #8
 8002698:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800269c:	0202      	lsls	r2, r0, #8
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	6849      	ldr	r1, [r1, #4]
 80026a2:	0849      	lsrs	r1, r1, #1
 80026a4:	2000      	movs	r0, #0
 80026a6:	460c      	mov	r4, r1
 80026a8:	4605      	mov	r5, r0
 80026aa:	eb12 0804 	adds.w	r8, r2, r4
 80026ae:	eb43 0905 	adc.w	r9, r3, r5
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	469a      	mov	sl, r3
 80026ba:	4693      	mov	fp, r2
 80026bc:	4652      	mov	r2, sl
 80026be:	465b      	mov	r3, fp
 80026c0:	4640      	mov	r0, r8
 80026c2:	4649      	mov	r1, r9
 80026c4:	f7fd fd58 	bl	8000178 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026d6:	d308      	bcc.n	80026ea <UART_SetConfig+0x322>
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026de:	d204      	bcs.n	80026ea <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e0c8      	b.n	800287c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026f0:	e0c4      	b.n	800287c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026fa:	d167      	bne.n	80027cc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80026fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002700:	2b08      	cmp	r3, #8
 8002702:	d828      	bhi.n	8002756 <UART_SetConfig+0x38e>
 8002704:	a201      	add	r2, pc, #4	@ (adr r2, 800270c <UART_SetConfig+0x344>)
 8002706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270a:	bf00      	nop
 800270c:	08002731 	.word	0x08002731
 8002710:	08002739 	.word	0x08002739
 8002714:	08002741 	.word	0x08002741
 8002718:	08002757 	.word	0x08002757
 800271c:	08002747 	.word	0x08002747
 8002720:	08002757 	.word	0x08002757
 8002724:	08002757 	.word	0x08002757
 8002728:	08002757 	.word	0x08002757
 800272c:	0800274f 	.word	0x0800274f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002730:	f7ff fcfa 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002736:	e014      	b.n	8002762 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff fd08 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800273e:	e010      	b.n	8002762 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002740:	4b5a      	ldr	r3, [pc, #360]	@ (80028ac <UART_SetConfig+0x4e4>)
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002744:	e00d      	b.n	8002762 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002746:	f7ff fc3b 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800274a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800274c:	e009      	b.n	8002762 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800274e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002754:	e005      	b.n	8002762 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8089 	beq.w	800287c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <UART_SetConfig+0x4e0>)
 8002770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002774:	461a      	mov	r2, r3
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	fbb3 f3f2 	udiv	r3, r3, r2
 800277c:	005a      	lsls	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	441a      	add	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	d916      	bls.n	80027c4 <UART_SetConfig+0x3fc>
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800279c:	d212      	bcs.n	80027c4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f023 030f 	bic.w	r3, r3, #15
 80027a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	8bfb      	ldrh	r3, [r7, #30]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	8bfa      	ldrh	r2, [r7, #30]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	e05b      	b.n	800287c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80027ca:	e057      	b.n	800287c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d828      	bhi.n	8002826 <UART_SetConfig+0x45e>
 80027d4:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <UART_SetConfig+0x414>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	08002801 	.word	0x08002801
 80027e0:	08002809 	.word	0x08002809
 80027e4:	08002811 	.word	0x08002811
 80027e8:	08002827 	.word	0x08002827
 80027ec:	08002817 	.word	0x08002817
 80027f0:	08002827 	.word	0x08002827
 80027f4:	08002827 	.word	0x08002827
 80027f8:	08002827 	.word	0x08002827
 80027fc:	0800281f 	.word	0x0800281f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002800:	f7ff fc92 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002804:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002806:	e014      	b.n	8002832 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002808:	f7ff fca0 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800280e:	e010      	b.n	8002832 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002810:	4b26      	ldr	r3, [pc, #152]	@ (80028ac <UART_SetConfig+0x4e4>)
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002814:	e00d      	b.n	8002832 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002816:	f7ff fbd3 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800281c:	e009      	b.n	8002832 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800281e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002824:	e005      	b.n	8002832 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002830:	bf00      	nop
    }

    if (pclk != 0U)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	d021      	beq.n	800287c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <UART_SetConfig+0x4e0>)
 800283e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002842:	461a      	mov	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	fbb3 f2f2 	udiv	r2, r3, r2
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	441a      	add	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	d909      	bls.n	8002876 <UART_SetConfig+0x4ae>
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002868:	d205      	bcs.n	8002876 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	e002      	b.n	800287c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2201      	movs	r2, #1
 8002880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2201      	movs	r2, #1
 8002888:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2200      	movs	r2, #0
 8002890:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002898:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800289c:	4618      	mov	r0, r3
 800289e:	3730      	adds	r7, #48	@ 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	08002d78 	.word	0x08002d78
 80028ac:	00f42400 	.word	0x00f42400

080028b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01a      	beq.n	80029c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029ae:	d10a      	bne.n	80029c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	605a      	str	r2, [r3, #4]
  }
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a02:	f7fe f875 	bl	8000af0 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d10e      	bne.n	8002a34 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f832 	bl	8002a8e <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e028      	b.n	8002a86 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d10e      	bne.n	8002a60 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f81c 	bl	8002a8e <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e012      	b.n	8002a86 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b09c      	sub	sp, #112	@ 0x70
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9e:	e0af      	b.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa6:	f000 80ab 	beq.w	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aaa:	f7fe f821 	bl	8000af0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d302      	bcc.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002aba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d140      	bne.n	8002b42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ad0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ae0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002ae4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8002aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e6      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b12:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002b14:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1a:	e841 2300 	strex	r3, r2, [r1]
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1e5      	bne.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e06f      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d057      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b80      	cmp	r3, #128	@ 0x80
 8002b54:	d054      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d051      	beq.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6a:	d149      	bne.n	8002c00 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002b9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e6      	bne.n	8002b76 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002bc8:	623a      	str	r2, [r7, #32]
 8002bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	69f9      	ldr	r1, [r7, #28]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e5      	bne.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e010      	b.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	f43f af40 	beq.w	8002aa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3770      	adds	r7, #112	@ 0x70
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <memset>:
 8002c2a:	4402      	add	r2, r0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d100      	bne.n	8002c34 <memset+0xa>
 8002c32:	4770      	bx	lr
 8002c34:	f803 1b01 	strb.w	r1, [r3], #1
 8002c38:	e7f9      	b.n	8002c2e <memset+0x4>
	...

08002c3c <__libc_init_array>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c74 <__libc_init_array+0x38>)
 8002c40:	4c0d      	ldr	r4, [pc, #52]	@ (8002c78 <__libc_init_array+0x3c>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	2600      	movs	r6, #0
 8002c48:	42a6      	cmp	r6, r4
 8002c4a:	d109      	bne.n	8002c60 <__libc_init_array+0x24>
 8002c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c7c <__libc_init_array+0x40>)
 8002c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8002c80 <__libc_init_array+0x44>)
 8002c50:	f000 f818 	bl	8002c84 <_init>
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	2600      	movs	r6, #0
 8002c5a:	42a6      	cmp	r6, r4
 8002c5c:	d105      	bne.n	8002c6a <__libc_init_array+0x2e>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c64:	4798      	blx	r3
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7ee      	b.n	8002c48 <__libc_init_array+0xc>
 8002c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6e:	4798      	blx	r3
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7f2      	b.n	8002c5a <__libc_init_array+0x1e>
 8002c74:	08002d98 	.word	0x08002d98
 8002c78:	08002d98 	.word	0x08002d98
 8002c7c:	08002d98 	.word	0x08002d98
 8002c80:	08002d9c 	.word	0x08002d9c

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
